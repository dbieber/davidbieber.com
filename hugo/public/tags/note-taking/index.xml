<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>note-taking on David Bieber</title>
    <link>https://davidbieber.com/tags/note-taking/</link>
    <description>Recent content in note-taking on David Bieber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://davidbieber.com/tags/note-taking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Explicit Ontologies in a World Without</title>
      <link>https://davidbieber.com/snippets/2022-12-16-note-taking-ontologies/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2022-12-16-note-taking-ontologies/</guid>
      
      <description>&lt;h2 id=&#34;background-ontologies-in-note-taking&#34;&gt;Background: Ontologies in Note-taking&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ll do my best to get the context for this thought down quickly, but I don&amp;rsquo;t think I&amp;rsquo;ll do a good job. Feel free to ask me if you&amp;rsquo;d like to understand the context better.&lt;/p&gt;
&lt;p&gt;In a note-taking system like C. or Tana, objects exist in an ontology&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This means that an object can have a type. That type definition can have properties. For example my notes might be full of people. Each person might have a birthday and contact info and a height and a handedness.&lt;/p&gt;
&lt;p&gt;Having ontologies be explicit can provide a lot of value in a note-taking system.
In particular: (1) This can enable powerful auto-complete / templating features. (2) This can enable powerful search functionality. (3) This can enable integrations with other specialized features (like a calendar, a contacts view, a shopping experience&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, whatever) or external software.&lt;/p&gt;
&lt;h2 id=&#34;agenda-three-key-points&#34;&gt;Agenda: Three Key Points&lt;/h2&gt;
&lt;p&gt;Next I want to make a series of points that interact a bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ontologies take time to maintain, and are difficult to design well.&lt;/li&gt;
&lt;li&gt;Large language models may be able to provide all three value propositions without actually needing the explicit ontology.&lt;/li&gt;
&lt;li&gt;Even if the above two points are right, there&amp;rsquo;s still value to explicit ontologies in a world where we don&amp;rsquo;t spend much time being explicit about our ontologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s this third and final point, which I realize I haven&amp;rsquo;t made clear just yet, that is the main thought I wanted to share in this snippet. Before we get there though, let&amp;rsquo;s expand on the first two points.&lt;/p&gt;
&lt;h2 id=&#34;doing-ontologies-manually-is-hard&#34;&gt;Doing Ontologies Manually is Hard&lt;/h2&gt;
&lt;p&gt;Coming up with useful ontologies is hard. Take the Person example from above.
Is it important that every person has an Interests field? Almost certainly not; you might not care to write down the interests of your dentist, for example. If you don&amp;rsquo;t like that example, consider an Education field. You probably don&amp;rsquo;t care to write down the educational history of everyone that shows up in your notes.&lt;/p&gt;
&lt;p&gt;But if you&amp;rsquo;re building a gift recommender, then an interests field might be critical. And if you&amp;rsquo;re building a job recommender, an education field might be critical.&lt;/p&gt;
&lt;p&gt;A risk you might run having an ontology in your notes is that it might discourage you from putting something in your notes because it doesn&amp;rsquo;t fit the ontology.
Suppose you avoid this risk, though, and manage to freely add information to your notes undeterred by the ontology&amp;rsquo;s constraints.
A second possible risk you run is that your ontology winds up being extremely sparse.
You add fields as you need them, but lots of fields only apply to a single instance, rather than to the majority of instances of a type. Is your ontology still useful at that point?&lt;/p&gt;
&lt;p&gt;A third potential risk, which extends the second, is that as your ontology grows&amp;hellip; you might end up with a type having two very similar fields. E.g. Person could end up with both a &amp;ldquo;Likes&amp;rdquo; field &lt;em&gt;and&lt;/em&gt; an &amp;ldquo;Interests&amp;rdquo; field. Why might this happen? Two reasons come to mind: One is that you simply have a bunch of fields, and so you accidentally use a new name (&amp;ldquo;Likes&amp;rdquo;) when referring to an existing attribute (&amp;ldquo;Interests&amp;rdquo;). The second is that &amp;ldquo;Likes&amp;rdquo; and &amp;ldquo;Interests&amp;rdquo; might mean slightly different things to you. That&amp;rsquo;s fine, if you want to track them separately. But these are highly correlated! And now you&amp;rsquo;re left with a dilemma (&amp;ldquo;Risk 4&amp;rdquo;, let&amp;rsquo;s call it): do you put the information in both the &amp;ldquo;Likes&amp;rdquo; and the &amp;ldquo;Interests&amp;rdquo; field? That would increase the maintenance burden of your note-base substantially (if you care about completeness/having the info you enter be maximally useful, which you might, in order to get the benefits of ontologies listed above). Or do you only put the information in one of the two fields? If you do that, then you risk your use of the ontology failing when you search for &amp;ldquo;Person with Interest in Table Tennis&amp;rdquo; only to find that half your table-tennis friends &amp;ldquo;Like&amp;rdquo; Table Tennis while the other half have an &amp;ldquo;Interest&amp;rdquo; in it.&lt;/p&gt;
&lt;p&gt;Finally, building ontologies takes time. Let&amp;rsquo;s turn our attention&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to large language models, because you might not need to spend your time on ontologies in the near future.&lt;/p&gt;
&lt;h2 id=&#34;llms-reduce-the-need-for-explicit-ontologies&#34;&gt;LLMs reduce the need for explicit ontologies&lt;/h2&gt;
&lt;p&gt;Large language models&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; may be able to provide many of the benefits of ontologies without the need for explicit ontologies. These models can understand and extract relevant concepts and relationships from unstructured text, allowing one to search and retrieve information without the need to pre-define an ontology.&lt;/p&gt;
&lt;p&gt;Recall the three benefits of ontologies that we&amp;rsquo;re interested in: auto-complete/templates, search, and integration with specialized systems.&lt;/p&gt;
&lt;h4 id=&#34;search&#34;&gt;Search&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s easiest to imagine how large language models are going to be useful for search first.
Imagine that instead of having ontologies in your note-base, you simply have free-form text.
You still might say that David is interested in table tennis, but there would be no formal &amp;ldquo;Interests&amp;rdquo; attribute linking David and Table Tennis.
If a large language model understands that text, then it will still be able to handle queries like &amp;ldquo;what is David interested in?&amp;rdquo; and &amp;ldquo;contacts who like table tennis?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;You can even try this on a small scale today in 
&lt;a href=&#34;https://chat.openai.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ChatGPT&lt;/a&gt;. Paste the following text into ChatGPT and it answers the questions correctly. I wont argue the case here, but I fully expect this to work on the scale of a full note-base in the coming months-years.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Mary likes hockey, collects coins, and reads sci-fi.
Glenn plays table tennis, collects rocks, and reads fantasy.
My dentist recommends the book &amp;quot;Jaws&amp;quot;. Next apt is March 6.
Peter plays scrabble and enjoys table tennis. Hanging out next Tuesday (Dec 20)

Who likes table tennis?
What are my dentist&#39;s interests?
Does my dentist like table tennis?
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;integration-with-specialized-systems&#34;&gt;Integration with Specialized Systems&lt;/h4&gt;
&lt;p&gt;One of the key reasons ontologies are useful is they allow for specialized systems to access the information stored in the ontology/notes, in order to provide a quality domain-specific experience using the data from the notes.&lt;/p&gt;
&lt;p&gt;This could take the form of a specialized contacts view of the contacts data found in your notes. It could be a specialized calendar view of time-annotated data in your notes. It could be the shopping experience I described in a footnote, which uses your contacts&#39; interests to surface gift suggestions. The possibilities are numerous.&lt;/p&gt;
&lt;p&gt;If search is robust (and it&amp;rsquo;s not totally clear that LLM search is going to be robust enough, but I suspect that it will be), then the data access requirements for these specialized integrations could be satisfied by the search described in the preceding section.&lt;/p&gt;
&lt;p&gt;Two ways to think about this:
(1) The specialized system issues queries &amp;ndash; possibly even natural language queries &amp;ndash; about the notebase. It gets structured results back. It uses the structured results to render the specialized domain-specific experience.
(2) The raw text in &lt;mark&gt;the note-base is being projected onto a temporary domain-specific ontology just for the specialized system&lt;/mark&gt;. E.g. the shopping experience might require an ontology where each Person has interests, while a separate job matching system might require an ontology where each Person has an educational background. Using the magic of LLMs, the raw text data is projected into the structured ontology needed by each system. But there&amp;rsquo;s no &amp;ldquo;one&amp;rdquo; ontology living in the note-base that the note-taker needs to maintain.&lt;/p&gt;
&lt;p&gt;Maybe these two ways are actually the same. 🤷&lt;/p&gt;
&lt;p&gt;At this point we&amp;rsquo;ve seen the first place where ontologies are useful even in this raw-text focused LLM-centric world. I&amp;rsquo;ve &lt;mark&gt;highlighted&lt;/mark&gt; it. We&amp;rsquo;ll come back to it shortly.&lt;/p&gt;
&lt;h4 id=&#34;auto-complete--templating&#34;&gt;Auto-complete / Templating&lt;/h4&gt;
&lt;p&gt;We come now to one of the main value-adds of an ontology: having a nice template to fill in about an object. Do we lose this in a raw-text LLM-centric world? By default, yes. But we can (very likely) use LLM-ish tech to implement an auto-complete / templating feature, arguably one that&amp;rsquo;s (in some ways) better than we get in an ontology-centric world.&lt;/p&gt;
&lt;p&gt;How? We can &lt;mark&gt;use the LLM-ish to suggest fields for an entity when we create it&lt;/mark&gt;. For example, when we mention a person, we can have our system insert fields (with blanks to be filled in) for the attributes that seem relevant to the person in the given context.
If we&amp;rsquo;re writing about how we met someone at a dinner party, it might provide an Interests field. Whereas if we&amp;rsquo;re writing about people we met at a career fair, it might provide an Education field.&lt;/p&gt;
&lt;p&gt;In this setting, the fields aren&amp;rsquo;t there to enable datalog search queries or populate a database; rather, the fields are there for human purposes: to prompt us to write the things we would want to write, and relieve us a bit of typing and a bit of cognitive load.
The search and integrations are going to work just fine whether the field is called &amp;ldquo;Interests&amp;rdquo; or &amp;ldquo;Likes&amp;rdquo; because the LLM understands that these are (in most contexts) synonyms.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve now introduced the second place where ontologies are useful even in a raw-text focused LLM-centric world, again &lt;mark&gt;highlighted&lt;/mark&gt;.&lt;/p&gt;
&lt;p&gt;In what ways is this proposed hypothetical templating feature better than an ontology-based templating feature? Recall the risks we discussed earlier: ontology maintenance runs the risk of there being lots of little-used fields in an ontology. In a naive ontology-based templating system, all these extra fields would clutter the interface, whereas in our proposed hypothetical templating feature, only a relevant subset of the fields show up by default.&lt;/p&gt;
&lt;p&gt;In what ways is this proposed hypothetical templating feature worse? Well, it loses the explicit association between objects of the same type. If later you decide you want all people to have a &amp;ldquo;Formal Name&amp;rdquo; attribute, there&amp;rsquo;s no clear source-of-truth place to add this attribute to all people. You could query for a list of all people, and then add to your notes &amp;ldquo;X&amp;rsquo;s formal name is Y&amp;rdquo; for each of the people. Just brainstorming; maybe this isn&amp;rsquo;t a drawback after all; I&amp;rsquo;ll have to keep thinking on this one.&lt;/p&gt;
&lt;h2 id=&#34;explicit-ontologies-in-a-world-without&#34;&gt;Explicit Ontologies in a World Without&lt;/h2&gt;
&lt;p&gt;Looking back over the &lt;mark&gt;highlighted&lt;/mark&gt; text, we can see that there are at least two places where explicit ontologies remain useful even in a raw-text focused LLM-centric world (that is, in a note-base full of raw text, not backed by an explicit ontology).&lt;/p&gt;
&lt;p&gt;The first was during querying for domain-specific experiences. There we saw the value of having the raw text in he note-base projected onto a temporary domain-specific ontology just for a specialized system.&lt;/p&gt;
&lt;p&gt;The second was for templating/auto-complete, one of the main values of an ontology. Using LLMs we can provide the appearance of there being an ontology without the note-base actually being backed by an explicit ontology.&lt;/p&gt;
&lt;p&gt;All of this relies on some amount of speculation about where our LLM&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; technology is going and what its coming capabilities will be. I&amp;rsquo;m happy to stand by this speculation, and happy to discuss.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Bear in mind I&amp;rsquo;ve used neither of these systems! Take my thoughts with grains of salt. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I just chose a random example. But anyway, the idea is that you might build a shopping widget that uses the data about your contacts&#39; preferences to surface gift ideas for them while you&amp;rsquo;re shopping. The ontology way to do this is for each Person in your notes to have a Likes or Interests field, which the shopping experience can access. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I was planning on squeezing a reference to &amp;ldquo;Factory factories&amp;rdquo; into this section, but then it didn&amp;rsquo;t fit in, so just sticking this in a footnote. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I&amp;rsquo;m using the term large language model here in a loose sense. I basically mean tech largely dependent on deep learning, including advances expected to come in the next few years. It&amp;rsquo;s easier to just say LLM though, even though that oversimplifies. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Dealing with Giant Group Chats</title>
      <link>https://davidbieber.com/snippets/2022-07-05-giant-group-chats/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2022-07-05-giant-group-chats/</guid>
      
      <description>&lt;p&gt;Sometimes &amp;ndash; usually because of Alex K Chen &amp;ndash; I am added to a giant group chat (GGC).
Today it was a 200+ person highly active chat with folks talking about AI programming tools, aging, and movies.
I love being added to such a chat. It makes me feel thought of, and my opinions respected. So, do keep adding me to GGCs.
However, with being added to a GGC comes some struggles. I haven&amp;rsquo;t fully figured out how to handle a GGC just yet.&lt;/p&gt;
&lt;p&gt;I think some people handle these situations in a more natural way than myself. Here&amp;rsquo;s what I imagine. They&amp;rsquo;re doing something else on the computer, messages are open in the background or in a side window. If they have a conversation-adjacent thought, they share it. If they see a message that looks interesting, they read it. Otherwise, they do their other activities and get on with their life.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If they have a conversation-adjacent thought, they share it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This part is Struggle #1.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If they see a message that looks interesting, they read it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This part is Struggle #2.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;struggle-1-sharing-thoughts-casually-in-a-200-person-setting&#34;&gt;Struggle #1: Sharing thoughts casually in a 200+ person setting&lt;/h3&gt;
&lt;p&gt;Why is this a struggle? I think slowly. I edit. I rethink relevance as the conversation moves away.
The hypothetical person who handles GCCs as described above &amp;ldquo;just&amp;rdquo; types and hits enter, relatively unencumbered.
I think about the permanence of putting something on the internet.
I think about confidentiality of work-adjacent stuff.
I think about whether what I&amp;rsquo;m saying is true, and about how true it is.
This kind of thought can make participation a challenge.&lt;/p&gt;
&lt;h3 id=&#34;struggle-2-staying-abreast-of-200-messages-per-hour&#34;&gt;Struggle #2: Staying abreast of 200 messages per hour&lt;/h3&gt;
&lt;p&gt;I don&amp;rsquo;t want to read all these messages.
They glimmer and my attention is drawn to them, but that doesn&amp;rsquo;t reflect my conscious decision making.
I&amp;rsquo;d much rather read a summary of the messages or a digest of the topics discussed once a week or so.
Then, only if a topic of interest was discussed, I might want to dive deeper and read the individual messages, and
contemplate leaving a reply.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tooling-for-struggle-1&#34;&gt;Tooling for Struggle #1&lt;/h3&gt;
&lt;p&gt;tl;dr Draft messages outside of conversation UI. Use &amp;ldquo;approve for dealyed send&amp;rdquo; model for sending messages.&lt;/p&gt;
&lt;p&gt;Struggle #1 is a personal psychological struggle.
It isn&amp;rsquo;t first and foremost something for which tooling seems relevant.
If I&amp;rsquo;m not comfortable sharing something with 200 people in a chat, why would tooling change that?
Well, as I&amp;rsquo;ve learned from adding 
&lt;a href=&#34;https://davidbieber.com/post/2022-01-08-new-messager-setup/&#34;&gt;Messager in Go Note Go&lt;/a&gt; tooling can actually make a huge difference in this type of space.
If instead of feeling like I&amp;rsquo;m sending a message to a massive group, I instead feel like I&amp;rsquo;m writing a draft of my thoughts, something I&amp;rsquo;ll maybe send later but maybe not, suddenly it becomes so much easier to write.
And then, once it&amp;rsquo;s written, it also becomes much easier to send.
This is the same lesson I&amp;rsquo;ve learned over and over with snippets since I initially decided to set up this system as 
&lt;a href=&#34;https://davidbieber.com/snippets/2019-12-30-writing-for-no-audience/&#34;&gt;writing for no audience&lt;/a&gt; back in 2019.&lt;/p&gt;
&lt;p&gt;So, what would the tooling look like for dealing with Struggle #1 in GGCs?
I would click a message to start drafting a response,
it would copy the message and context into an editor &amp;ndash; Roam Research, say &amp;ndash; and maybe even stick in the template for writing a snippet.
Then, completely outside the context of the group thread I could compose my thoughts.
If I decide to share it back to the group, great.
If I decide to instead post that thought as a snippet, great.
And if it remains relegated to my notes forever and never sees the light of day, that&amp;rsquo;s a fine outcome too.&lt;/p&gt;
&lt;p&gt;[Aside: The acceptability of that outcome is what makes the writing easier. The very possibility of that outcome diminishes the possibility of that outcome by making the other outcomes more likely. It&amp;rsquo;s the opposite of a self-fulfilling prophecy. A self-fulfilling prophesy is an expectation whose existence leads to its own fulfillment; this is an expectation whose very existence works to prevent its fulfillment.]&lt;/p&gt;
&lt;p&gt;One of the lessons I learned from my Go Note Go messager-queue was the value of the &amp;ldquo;approve for delayed send&amp;rdquo; model.
Psychologically it was easier for me to mark a message as approved for sending, and have an automated system later send the message on my behalf once it was approved, rather than directly sending it myself.
Marking something as approved for sending (1) admits the possibility that I make further revisions to the message, and (2) internally relieves myself of some of the responsibility of sending the message. Of course, I am still fully responsible for the message and I accept this responsibility, but nevertheless that perception of decreased responsibility is a relaxing feeling that makes message sending easier.
It also (3) prevents me from actively waiting for replies to come it, a behavior I&amp;rsquo;d like to avoid. It does this because my messages go out without my awareness in the moment, so I cannot sit refreshing or watching for new messages. This way I don&amp;rsquo;t need to expend effort diverting my attention away from waiting for messages; my own unawareness has taken care of this for me.
So, having this &amp;ldquo;approve for delayed send&amp;rdquo; model for dealing with GGCs would be appreciated.&lt;/p&gt;
&lt;h3 id=&#34;tooling-for-struggle-2&#34;&gt;Tooling for Struggle #2&lt;/h3&gt;
&lt;p&gt;Struggle #2 has psychological components, but is also more directly about capabilities.&lt;/p&gt;
&lt;p&gt;The psychological bit:
Keeping up with 200 messages per hour isn&amp;rsquo;t even desirable. Why? It&amp;rsquo;s not that it&amp;rsquo;s a lot of noise &amp;ndash; though sometimes there is a lot of noise.
But even when there&amp;rsquo;s a lot of high quality interesting fun messages, it&amp;rsquo;s not stuff I&amp;rsquo;m actively looking to read or learn about or people that I&amp;rsquo;m choosing to keep in touch with. Instead, it&amp;rsquo;s whatever the group collectively has steered toward.
I&amp;rsquo;d rather be more intentional about what I read and discuss, rather than being at the whims of 200+ people, many of whom I haven&amp;rsquo;t met.
However, there is tension between that desire for intentionality and the desire to hear folks&#39; interesting ideas and share my own.
Adding to the tension further is a natural inclination toward reading messages as they come in, because they&amp;rsquo;re attention-grabbing even if they aren&amp;rsquo;t where I&amp;rsquo;d like to place my focus.&lt;/p&gt;
&lt;p&gt;The capabilities bit:
Even if I decided I did want to stay abreast of the conversation, there&amp;rsquo;s simply too much to reasonably process.
People are discussing topics about which I have a lot to learn.
I don&amp;rsquo;t have the bandwidth to think deeply &amp;ndash; or even shallowly &amp;ndash; about what folks are saying, while also maintaining normal human functions.&lt;/p&gt;
&lt;p&gt;So, what tooling can help?&lt;/p&gt;
&lt;p&gt;Summarization:
A machine learning system that categorizes messages by topic would be super helpful.
It could send a weekly digest listing the topics discussed, and clicking on a topic could bring me to a summary of the messages, with the option to drill down into the individual messages.&lt;/p&gt;
&lt;p&gt;Notification settings:
Right now I&amp;rsquo;ve simply turned off all notifications. If I could turn back on notifications for specific topics, that would be nice. E.g. &amp;ldquo;notify me if people start talking about programming tools again, but only if we haven&amp;rsquo;t talked about programming tools in at least a day since the last time you notified me.&amp;rdquo; This type of notification seems straightforward to build combining my Messager system with LLMs. Perhaps I&amp;rsquo;ll give it a go.&lt;/p&gt;
&lt;p&gt;Messenger UI: Even with notifications disabled, GGCs appear first in my list of Messenger chats because FB orders them by message recency, and GGCs always have a recent message. I&amp;rsquo;d prefer a way to keep them out of this default view, so I can see genuine conversations with individual people in their place.&lt;/p&gt;
&lt;p&gt;Browsing UI: The existing UI is unhelpful for trying to get an overview of the conversation. There&amp;rsquo;s a lot of whitespace, so only a few messages are visible at once. Replies for different topics are all mixed together.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you&amp;rsquo;re working on anything like the toolings mentioned here, don&amp;rsquo;t hesitate to get in touch. There&amp;rsquo;s a Discussions section below, or feel free to ping me in a GGC!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sending messages as I drift off to sleep</title>
      <link>https://davidbieber.com/post/2022-01-08-new-messager-setup/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/post/2022-01-08-new-messager-setup/</guid>
      
      <description>&lt;p&gt;In this post I describe my new Messager setup,
and how it allows me to send messages directly from Roam Research &lt;em&gt;or&lt;/em&gt;
from a standalone keyboard (no monitor) that I keep at my bedside as I drift off to sleep, and which I take driving and camping.&lt;/p&gt;
&lt;p&gt;Currently my setup supports sending messages to
Facebook Messenger, Twitter,
Slack, Discord, and iMessage.
I intend to add gChat and email support next, since there are still a handful of people I want to message that don&amp;rsquo;t use any of these.&lt;/p&gt;
&lt;p&gt;Above all else, the beauty of this project to me is its usability,
which is hard to communicate in a write-up like this.
Some of the usability comes from the way the components integrate with my existing workflows.
Some of the usability comes from design choices
(like using a keyboard with no monitor for note-taking and message drafting).
I&amp;rsquo;ll try to point out these usability elements along the way.
Bear in mind I designed this primarily for myself
(though I have a handful of friends along for the ride as well, trying it out and making their own contributions).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;
&lt;h3 id=&#34;go-note-go-the-headless-keyboard&#34;&gt;Go Note Go: The Headless Keyboard&lt;/h3&gt;
&lt;p&gt;For some background, I developed Go Note Go, a headless keyboard designed for note-taking on the go.
Go Note Go is a note-taking system for when you&amp;rsquo;re on the go, with a focus on driving and camping.
You can 
&lt;a href=&#34;https://davidbieber.com/projects/go-note-go&#34;&gt;read all about Go Note Go here&lt;/a&gt; and learn more on 
&lt;a href=&#34;https://github.com/dbieber/gonotego&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;its GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Go Note Go&amp;rsquo;s main purpose is note-taking.
Anything you type into Go Note Go or voice-record into it gets transcribed and uploaded to your notes as soon as it gets an internet connection.
For me, Go Note Go uploads to Roam Research. It also supports RemNote, IdeaFlow, Mem, and Notion, and adding additional systems isn&amp;rsquo;t too difficult.&lt;/p&gt;
&lt;p&gt;One of the usability perks of Go Note Go is that there is no monitor. This means you can&amp;rsquo;t get distracted browsing the internet while writing on Go Note Go. You also can&amp;rsquo;t get distracted wordsmithing your own writing. It makes writing pleasurable, even if it comes at the cost of having typos and stray thoughts in your writing; you can always clean those up later.&lt;/p&gt;
&lt;p&gt;Go Note Go does a lot more, so I do encourage you to 
&lt;a href=&#34;https://davidbieber.com/projects/go-note-go&#34;&gt;learn more about it&lt;/a&gt;, but it isn&amp;rsquo;t the focus of this post, which is about sending messages.
For the purposes of this post, Go Note Go is a data entry system for Roam. And since I&amp;rsquo;ve also built a system that allows sending messages directly from Roam, this means I can now send messages directly from Go Note Go. So, I can send messages when driving, camping, and as I drift off to sleep at night.&lt;/p&gt;
&lt;p&gt;To send a message in Go Note Go, you simply &amp;ldquo;@&amp;rdquo; the person you are writing to. To send a message to Adriana, I would write &amp;ldquo;@Adriana Message goes here&amp;rdquo;. To send a message to David Dohan (using first and last name), I could write &amp;ldquo;@David Dohan: Message goes here&amp;rdquo;. You can @ someone at any point in the message. You can also @ multiple people, and Messager will send them a group message.&lt;/p&gt;
&lt;p&gt;Go Note Go acts as an outliner now too; this is both a big usability improvement for Go Note Go on it&amp;rsquo;s own, and doubly so for using Go Note Go as a messager. An &amp;ldquo;outliner&amp;rdquo; is a system for taking notes as a series of nested bullets. You can push tab to indent notes underneath other notes; I&amp;rsquo;ve developed a user experience that makes this moderately natural, even in the absence of a monitor or any other visual feedback. For sending messages, the outliner feature is a boon. Any notes you nest under an @&amp;rsquo;d note will also register as additional messages for the @&amp;rsquo;d recipients. This makes writing longer multiline messages a pleasure, even without a monitor.&lt;/p&gt;
&lt;p&gt;The default behavior of my messaging system is to hold the messages for approval before sending them. So, the messages that I write as I drift off to sleep don&amp;rsquo;t send as I drift off to sleep. Instead, I see them in the morning and approve them, and only upon being approved are they sent automatically.&lt;/p&gt;
&lt;p&gt;This delayed-approve-then-send approach is particularly well suited for Go Note Go, where I likely make typos and want to clean up the messages before they are sent, since I am writing them without a monitor. Later in the post I&amp;rsquo;ll dive into what the approval process looks like (tl;dr there&amp;rsquo;s a spreadsheet where I can mark a message as &amp;ldquo;OK&amp;rdquo; to send), but first I want to share additional benefits of being able to send messages directly from my note-taking app, which is currently Roam Research.&lt;/p&gt;
&lt;h3 id=&#34;drafting-messages-in-roam-research&#34;&gt;Drafting Messages in Roam Research&lt;/h3&gt;
&lt;p&gt;Anything I write on my Go Note Go appears in Roam Research, but I can also take notes directly in Roam.
Just like on Go Note Go, the way to draft a message in Roam is to &amp;ldquo;@&amp;rdquo; the person you are writing to.
Messager has some heuristics it uses to translate your @&amp;rsquo;s into proper recipients.
So, the syntax for @&amp;lsquo;ing someone isn&amp;rsquo;t too strict.&lt;/p&gt;
&lt;p&gt;Using Roam offers some possibilities beyond what I can do on Go Note Go, such as including images in messages.
Like on Go Note Go, you can use nested bullets to create longer messages,
and you can @ as many people as you want for a message.
In Roam, however, you can also include images in your messages.
Messager will intelligently send those in the native format used by the underlying messaging service,
rather than blindly sending the markdown stored in Roam.
I find this feature, being able to use images naturally in Roam, and then have them send naturally as messages,
quite pleasant.&lt;/p&gt;
&lt;p&gt;One future direction I&amp;rsquo;d like for this project is to add a &amp;ldquo;send&amp;rdquo; button in Roam next to any messages I&amp;rsquo;ve drafted there,
as well as to display the status of the messages inline in my notes. That&amp;rsquo;s not implemented now, but would be a nice-to-have for the future.&lt;/p&gt;
&lt;p&gt;Today, all messages are automatically added to my &amp;ldquo;messager queue&amp;rdquo; where they wait for approval before being sent.
I like having this approve-before-sending approach as the default, since it psychologically frees me up to write things I might not otherwise write if I was instead using a send button that sent immediately.
However, sometimes being able to send something immediately is desirable, and that&amp;rsquo;s not a clean option in the current setup.&lt;/p&gt;
&lt;h3 id=&#34;roam-to-sheets-the-messager-queue&#34;&gt;Roam to Sheets: The Messager Queue&lt;/h3&gt;
&lt;p&gt;Any messages in Roam (whether entered directly into Roam, or entered via Go Note Go), are automatically added to a spreadsheet, the &amp;ldquo;Messager Queue&amp;rdquo;. These are the spreadsheet&amp;rsquo;s columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Recipient&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Approval&lt;/td&gt;
&lt;td&gt;Status&lt;/td&gt;
&lt;td&gt;Metadata&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Messager Queue sheet is filtered by default to show all pending messages. For each message it shows the &lt;em&gt;Service&lt;/em&gt; on which it will be sent and well as the &lt;em&gt;Recipient&lt;/em&gt; of the message. The service can be one of FB Messenger, Twitter, iMessage, a Slack server, or Discord. The recipient can either be an individual, a list of individuals, a group, a Slack channel, or a Discord server and channel.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also a sheet that lists aliases, so it&amp;rsquo;s easy to use a short name or informal name to refer to a longer service or recipient; e.g. I use &amp;ldquo;@Audio Tools&amp;rdquo; as a shorthand for sending to a group of 5 people on Messenger all interested in audio tools for networked thought.&lt;/p&gt;
&lt;p&gt;The Messager Queue sheet also displays the &lt;em&gt;Text&lt;/em&gt; of the message to send, so you can easily clean up the message here for any typos or clarifications before it is sent.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Date&lt;/em&gt; and &lt;em&gt;Time&lt;/em&gt; columns allow for scheduling messages to be sent at any point in the future. Leave them blank and the message will be sent as soon as it is approved. Use keyboard shortcuts cmd-; (for date) and cmd-shift-; (for time) to quickly fill out these columns if desired.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;em&gt;Approval&lt;/em&gt; column is the most important. Mark a messages as OK if you want it to be sent, or as Ignored if you deside to skip it. The &lt;em&gt;Status&lt;/em&gt; column is updated automatically by Messager when the message is sent (or if it fails to send, then the error appears here). You can also mark the Status manually with whatever value you want (e.g. if you send the message manually), and the Messager system will ignore that message going forward. If you want the system to retry sending a message, simply clear out the Status column and it will try again.&lt;/p&gt;
&lt;p&gt;I include this spreadsheet as a custom service in 
&lt;a href=&#34;https://getferdi.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ferdi&lt;/a&gt;, so it lives alongside all the messaging apps I use. (This in itself might be the subject of a future 
&lt;a href=&#34;https://davidbieber.com/snippets&#34;&gt;snippet&lt;/a&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;why-the-approval-system-over-immediate-messages&#34;&gt;Why the approval system over immediate messages?&lt;/h3&gt;
&lt;p&gt;Beyond allowing me to catch a bunch of typos, it&amp;rsquo;s also a psychologically useful thing for me.
I am more willing to write and I feel able to say more things that I might not otherwise,
knowing I have the opportunity to cancel or change the message later.
In that way, it&amp;rsquo;s like gmail&amp;rsquo;s undo feature. In gmail, undo not a true undo, but having those 30 seconds after clicking send to retract the message make a big difference.&lt;/p&gt;
&lt;p&gt;Another benefit of sending the messages only after approving them is the ability to sleep at night. If I write a message at night, I know you haven&amp;rsquo;t responded yet because my messages haven&amp;rsquo;t even sent yet; they&amp;rsquo;ll go out in the morning, after I&amp;rsquo;ve had a chance to clean them up. So, I don&amp;rsquo;t spend any mental effort wondering if there&amp;rsquo;s a response from you. It also allows me to set the appropriate tone for the messages, by having them go out at a reasonable time, rather than appearing urgent by being sent in the middle of the night. And it does this without me needing to keep the message draft in my head as I sleep. So, I sleep better.&lt;/p&gt;
&lt;p&gt;This is why, while the ability to send messages immediately would also be a good feature to add, I am inclined to leave approve-in-the-morning messages as the system&amp;rsquo;s default behavior.&lt;/p&gt;
&lt;h3 id=&#34;notifications-from-bieber-bot&#34;&gt;Notifications from Bieber Bot&lt;/h3&gt;
&lt;p&gt;One additional small usability feature is that Bieber Bot will message me in the morning or evening whenever there are messages in the Messager Queue awaiting my approval.&lt;/p&gt;
&lt;p&gt;This sounds like a small convenience, and in fact has proven even more useful than it might at first sound.
When I wake up in the morning, I sometimes don&amp;rsquo;t remember that I&amp;rsquo;ve written messages the preceding night.
So, having Bieber Bot send me the link to the Messager Queue and gently remind me to approve the messages has been
consistently charming and welcome. Thanks, Bieber Bot.&lt;/p&gt;
&lt;h3 id=&#34;automatic-sending-from-sheets-with-messager&#34;&gt;Automatic Sending from Sheets with Messager&lt;/h3&gt;
&lt;p&gt;Messager is the underlying system that sends the messages in the Messager Queue system.
As noted previously, it supports
Facebook Messenger, Twitter,
Slack, Discord, and iMessage.
It also supports Hacker News, which hasn&amp;rsquo;t been so useful for this project.
And I am thinking I may add gChat and email support next.&lt;/p&gt;
&lt;p&gt;I use Messager for more than just sending messages from the Messager Queue spreadsheet;
it also backs other projects like my 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-01-30-sql-for-the-kangaroo-auto-responder/&#34;&gt;Kangaroo Auto-responder&lt;/a&gt; and 
&lt;a href=&#34;https://davidbieber.com/projects/bieber-bot/&#34;&gt;several parts of Bieber Bot&lt;/a&gt;.
Its purpose, in the most broad sense, is to support programmatically sending and receiving messages in a uniform manner across all the messaging systems I use.&lt;/p&gt;
&lt;p&gt;For Facebook Messager, it uses 
&lt;a href=&#34;https://fbchat.readthedocs.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fbchat&lt;/a&gt; to enable programmatically sending and receiving messages as myself. It also uses Facebook&amp;rsquo;s API to allow sending messages as Bieber Bot.&lt;/p&gt;
&lt;p&gt;For Twitter, it uses the API to support public tweets, private tweets (using a separate account; 
&lt;a href=&#34;https://davidbieber.com/post/2021-03-07-roam-twitter-bot-dev-guide/&#34;&gt;see here for how I use this to reclaim my attention&lt;/a&gt;), and DMs.&lt;/p&gt;
&lt;p&gt;For iMessage, it uses AppleScript.&lt;/p&gt;
&lt;p&gt;Slack and Discord are the most recent additions, and they currently live outside the core Messager system;
they are implemented using Browserflow flows.
This means that I am effectively sending Slack and Discord messages as myself, rather than using an API to do so.
The messages are sent in a browser using clicks and keyboard presses,
all in the same human-centric UI that I would use if I were to send the messages manually.
I&amp;rsquo;m so grateful to Browserflow for making this possible, as Slack and Discord have been really key additions to this project.&lt;/p&gt;
&lt;h3 id=&#34;reflections-on-the-setup&#34;&gt;Reflections on the setup&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve been using the setup for only a few days so far, and am continuing to actively develop it.
So far, I absolutely love it.&lt;/p&gt;
&lt;p&gt;The headless typing experience provided by Go Note Go makes for a great environment for drafting messages.
So too does using Roam Research while scrolling through social media. (I&amp;rsquo;m the sort of person who doesn&amp;rsquo;t usually like replying publicly to social media posts, but does enjoy engaging with them in 1:1 or small group chat messages.)
Drifting off to sleep has proven to be another excellent time to share thoughts with friends.
I don&amp;rsquo;t want to start &lt;em&gt;a conversation&lt;/em&gt; with friends as I drift off to sleep, but loads of thoughts come to mind that I do want to share with people, and so adding them to my Messager Queue to send the next day has been quite satisfying.&lt;/p&gt;
&lt;p&gt;If this interests you, feel free to get in touch.
If you do, I&amp;rsquo;ll do my best to get back to you, likely as I&amp;rsquo;m drifting off to sleep.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Draft Instructions for Flashcard Collection Task</title>
      <link>https://davidbieber.com/snippets/2021-11-23-flashcard-collection-task/</link>
      <pubDate>Tue, 23 Nov 2021 01:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-11-23-flashcard-collection-task/</guid>
      
      <description>&lt;p&gt;Hello! This is a draft of instructions I intend to send out to volunteers for the contextual flashcard dataset collection project.
I would love your feedback on the instructions before I send them out more widely.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Welcome to the Contextual Flashcard Dataset Project.
Thank you for volunteering!
By working together, we are assembling a dataset of thousands of in-context flashcards
to help evaluate and improve future automatic flashcard generation projects.&lt;/p&gt;
&lt;p&gt;To get started, install the Browserflow extension and the flow:
&lt;a href=&#34;https://browserflow.app/shared/1b2b5231-5f96-4f73-87a6-006626fa3831&#34;&gt;https://browserflow.app/shared/1b2b5231-5f96-4f73-87a6-006626fa3831&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Your help is requested in creating flashcards to populate the dataset.
Please submit between 5 and 200 flashcards that you believe would be useful or interesting to you.
The flow above will assist you in submitting flashcards to the dataset.&lt;/p&gt;
&lt;p&gt;To submit a flashcard for the dataset:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Browse the web as normal.&lt;/li&gt;
&lt;li&gt;Select some text you consider important.&lt;/li&gt;
&lt;li&gt;Run the 
&lt;a href=&#34;https://browserflow.app/shared/1b2b5231-5f96-4f73-87a6-006626fa3831&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Create Flashcard Entry flow&lt;/a&gt;; it will open the Create Flashcard Entry form and pre-populate it for you.&lt;/li&gt;
&lt;li&gt;Make any desired changes to the &amp;ldquo;Flashcard Front&amp;rdquo; and &amp;ldquo;Flashcard Back&amp;rdquo; fields in the Create Flashcard Entry form.&lt;/li&gt;
&lt;li&gt;Submit the form.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In lieu of using Browserflow, you may also submit 
&lt;a href=&#34;https://forms.gle/vTNWReM6qeEwX6GDA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the data entry form&lt;/a&gt; manually.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;how-will-the-data-be-used&#34;&gt;How will the data be used?&lt;/h3&gt;
&lt;p&gt;The dataset will be cleaned. Personal information or offensive language will be removed. The resulting dataset will be made public for anyone to use.&lt;/p&gt;
&lt;h3 id=&#34;when-are-submissions-open&#34;&gt;When are submissions open?&lt;/h3&gt;
&lt;p&gt;We will begin collecting submissions on December 1, 2021, and leave submissions open for 2 months, closing submissions on January 31, 2022.&lt;/p&gt;
&lt;h3 id=&#34;what-flashcards-should-i-submit&#34;&gt;What flashcards should I submit?&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s up to you! Still asking? Here&amp;rsquo;s some guidance:&lt;/p&gt;
&lt;p&gt;Submit any flashcards that you would (1) find personally interesting or useful, and (2) only contain public information.&lt;/p&gt;
&lt;p&gt;Interesting facts from Wikipedia or articles you read online are a good idea.
Private information about close friends is not.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>BIRDS: Bidirectional incremental real-time data synchronizers</title>
      <link>https://davidbieber.com/snippets/2021-11-20-birds/</link>
      <pubDate>Sat, 20 Nov 2021 02:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-11-20-birds/</guid>
      
      <description>&lt;p&gt;The culmination of my thinking on note-taking interoperability so far is that we need &lt;strong&gt;BIRDS&lt;/strong&gt;. 🐦. Allow me to explain.&lt;/p&gt;
&lt;p&gt;We want an &amp;ldquo;intermediate representation&amp;rdquo; for note-taking systems, to allow them to interoperate.&lt;/p&gt;
&lt;p&gt;Here an &amp;ldquo;intermediate representation&amp;rdquo; means an &lt;strong&gt;in-process&lt;/strong&gt; representation of notes that can do &lt;strong&gt;bidirectional real-time incremental&lt;/strong&gt; syncs with any of the popular note-taking systems (any system with a connector written for it).
The main reason we want this is it allows application developers to write applications once for the IR, and have their application work for users using any note-taking system.
A second reason this is desirable is it allows introducing data into your notes from multiple sources, like your email, news feeds, messages, and social media accounts.&lt;/p&gt;
&lt;p&gt;To bridge a note-taking system with the IR, a connector should be written between the system and the intermediate representation. These connectors, we shall call &lt;strong&gt;birds&lt;/strong&gt;, 🦤, short for &amp;ldquo;bidirectional incremental real-time data synchronizer&amp;rdquo;. Each bird 🐔 is a bridge that either pushes, pulls, or pushes-and-pulls data between the &amp;ldquo;intermediate representation&amp;rdquo; notebase and some data source or storage system.&lt;/p&gt;
&lt;p&gt;Birds 🦚 are bidirectional because they allow pushing or pulling data in either direction.
They are incremental because they are aware of what data is on the other end of the connection, and only transmit changes.
They are real-time, because these changes are transmitted quickly and automatically.
These properties are similar to those of Dropbox or Google Drive, but rather than there being files on either end of the connection, there are notes.&lt;/p&gt;
&lt;p&gt;What are the birds 🦜 that I would use for my current setup?&lt;/p&gt;
&lt;p&gt;I would use a bidirectional bird 🦃 with Roam Research, since that&amp;rsquo;s my core note-taking location at the moment.
I would use a bird 🐤 to connect my email to my notes. Ideally I would also have birds 🦉 for each of the messaging and social media platforms that I use too.
I would use a bird 🐧 to write my full notebase to disk locally.&lt;/p&gt;
&lt;p&gt;If later I switch away from Roam, I would use a new bird 🐓 to import my data into whatever new better system I switch to.&lt;/p&gt;
&lt;p&gt;Remarkably, I was able to put a bird 🦢 emoji next to every use of the word bird 🕊️ in this snippet, and still not run out of bird 🦆 emojis.&lt;/p&gt;
&lt;p&gt;🦅&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Save my spot! Finer-grained bookmarks for incremental reading</title>
      <link>https://davidbieber.com/snippets/2021-11-20-save-my-spot/</link>
      <pubDate>Sat, 20 Nov 2021 01:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-11-20-save-my-spot/</guid>
      
      <description>&lt;p&gt;When I find articles on the web, often I only read a small portion of an article before browsing away.
Instead of giving up on the article, I would like to leave a little visual marker on the page indicating the part of the page that I reached.
I&amp;rsquo;d then also like to automatically add a link to this marker to my notes.
So, if I&amp;rsquo;m ever reviewing my notes, I&amp;rsquo;ll be able to jump right back into the article where I left off.&lt;/p&gt;
&lt;p&gt;If I later continue reading the article, I&amp;rsquo;d like to move the marker to whatever spot I reach. (It&amp;rsquo;s OK if the old links keep linking to the old location, but I want a new link to whatever spot I&amp;rsquo;ve reached.)&lt;/p&gt;
&lt;p&gt;I think this should be possible to build with Browserflow. Let&amp;rsquo;s consider how.
I think I would do this with two flows, one to save my spot on a page (and add it to my notes),
and a second flow to restore to that spot on the page from the link in my notes.&lt;/p&gt;
&lt;p&gt;The biggest decision is how to represent a spot on a page. One option is the scroll position. Another option would be to remember a unique element id. Both approaches have drawbacks. Using scroll position doesn&amp;rsquo;t work well with dynamic content. Element ids aren&amp;rsquo;t guaranteed to be unique. I am leaning toward the scroll position approach to start, and then I&amp;rsquo;ll see how fragile it is. Even though it isn&amp;rsquo;t perfect, it will work in most situations.&lt;/p&gt;
&lt;p&gt;When I run the first flow, it will grab the URL of the current page and the current scroll position, and it will write that into my notes. This requires changing tabs, which is easy to do with Browserflow, but not easy to do with a standard JavaScript script. That flow will be run on the website where I am reading the article.&lt;/p&gt;
&lt;p&gt;The other flow will be run while I&amp;rsquo;m reading my notes. It would be great if just clicking on a link in my notes could trigger this flow and take me to the correct spot in the article, but this isn&amp;rsquo;t possible (by default) with Browserflow today. One way to work around this limitation of Browserflow is to write an always-on flow that listens for when I&amp;rsquo;ve clicked the link. Unfortunately, always-on flows are not great with Browserflow&amp;rsquo;s pricing plans.&lt;/p&gt;
&lt;p&gt;When I run the flow to restore my spot in an old article, the flow will first open a new tab to that article&amp;rsquo;s webpage. Then it will scroll to the specified position. When the flow starts, it will first need a way to determine which of the links on the notes page to follow. With the current version of Browserflow that I have (0.72 I think), you can just click on the link to specify this. This option is removed unfortunately in the latest version of Browserflow. Instead, we can probably use a clever selector to select the user-selected link. This should work in later Browserflow versions.&lt;/p&gt;
&lt;p&gt;Once these two flows are implemented, saving and loading my point in an article to and from my notes will become much easier. The next improvement will be adding in a bit of visual flourish (e.g. a visual marker in the article to draw my eye to where I left off). Certainly a smoother UX is feasible than the one I&amp;rsquo;ve planned here, but I think this Browserflow prototype hits a sweet spot of quality-to-effort ratio, and will be a satisfying prototype to build and use for myself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organizing a Twitter Discussion: Gathering Twitter Replies</title>
      <link>https://davidbieber.com/snippets/2021-11-20-twitter-replies/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-11-20-twitter-replies/</guid>
      
      <description>&lt;p&gt;I 
&lt;a href=&#34;https://twitter.com/Bieber/status/1461128201485402112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tweeted&lt;/a&gt; about spaced repetition earlier this week, sharing and summarizing 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-11-02-improvements-to-spaced-repetition/&#34;&gt;my latest snippet on the subject&lt;/a&gt;. A bunch of people left thoughtful replies, and I was quite pleased with the discussion. Now I want to look over the discussion holistically, but I don&amp;rsquo;t see a great way to do this. I don&amp;rsquo;t even see a way to look at all the replies to my thread in one place. I want to see not just this, but also replies to replies. TweetDeck might be able to help, but I don&amp;rsquo;t see how.&lt;/p&gt;
&lt;p&gt;I think what I&amp;rsquo;d like to do is write a little script that takes a tweet as input, and outputs links to all the replies and replies to replies in a little tree that I can put into Roam.
Then I can make notes on the full thread, and even link together different parts of the conversation.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s give this a try.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import twython
from messager import settings

client = twython.Twython(
        settings.TWITTER_CONSUMER_KEY,
        settings.TWITTER_CONSUMER_SECRET,
        settings.TWITTER_ACCESS_TOKEN,
        settings.TWITTER_ACCESS_TOKEN_SECRET)

def get_replies(status_id):
  status = client.lookup_status(id=status_id)[0]
  return get_replies_to_status(status)

def get_replies_to_status(status):
  status_id = status[&#39;id&#39;]
  screen_name = status[&#39;user&#39;][&#39;screen_name&#39;]
  results = client.search(
      q=f&#39;to:{screen_name}&#39;, sinceId=status_id, count=128)
  candidates = results[&#39;statuses&#39;]
  replies = []
  for candidate in candidates:
    if candidate[&#39;in_reply_to_status_id&#39;] == status_id:
      replies.append(candidate)
  return replies

def get_recursive_replies(status_id):
  status = client.lookup_status(id=status_id)[0]
  all_replies = []
  to_search = [status]
  searched = set()
  while to_search:
    status = to_search.pop()
    if status[&#39;id&#39;] not in searched:
      replies = get_replies_to_status(status)
      all_replies.extend(replies)
      to_search.extend(replies)
      searched.add(status[&#39;id&#39;])
  return all_replies

status_id = 1461128201485402112
replies = get_recursive_replies(status_id)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aside: I would love for this file (the markdown file I&amp;rsquo;m writing this snippet in) to double as a Python file.
When I run it, just the Python code block(s) would get run.&lt;/p&gt;
&lt;p&gt;To my surprise the Twitter API did not make it easy to query for replies to a tweet. So, I&amp;rsquo;m using the workaround on display above.
To get all replies to a tweet, I query for all tweets to the tweet author, and then filter for those that are actually replies.
Since the number of search results is limited, this might not always work; it depends on what order Twitter decides to sort tweets by. If Twitter returns the oldest tweets first, this method will work consistently.&lt;/p&gt;
&lt;p&gt;It does seem to be working for now, fortunately. There are 60 recursive replies to my tweet, and with this method I was able to lay them all out in a row. Pasting the urls into Roam, I find the default rendering of each tweet in Roam takes up a bit too much space though and provides too much context. So, I may need to modify the display a bit more.&lt;/p&gt;
&lt;p&gt;My hope is that I can lay out the entire conversation compactly, and then start marking it up with my own notes, e.g. tagging replies that express similar ideas so I can reply to them together rather than individually.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Machine Learning and Automation Ideas for Note-taking</title>
      <link>https://davidbieber.com/snippets/2021-10-28-ml-and-automation-for-note-taking/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-10-28-ml-and-automation-for-note-taking/</guid>
      
      <description>&lt;p&gt;Let&amp;rsquo;s consider machine learning first, and then automation. For each we brainstorm the potential value for note-taking.&lt;/p&gt;
&lt;h3 id=&#34;the-value-of-markmachine-learningmark-for-note-taking&#34;&gt;The Value of &lt;mark&gt;Machine Learning&lt;/mark&gt; for Note-Taking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatic &lt;strong&gt;transcription&lt;/strong&gt; of audio notes
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speaker identification&lt;/strong&gt; during meetings or conversations&lt;/li&gt;
&lt;li&gt;Resurfacing of action items, surfacing relevant information, and performing actions (e.g running a google search or sending a message) in response to audio cues during meetings or conversations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automatic &lt;strong&gt;categorization&lt;/strong&gt; of notes&lt;/li&gt;
&lt;li&gt;Automatic &lt;strong&gt;categorization of spaced repetition&lt;/strong&gt; flash cards&lt;/li&gt;
&lt;li&gt;Automatic &lt;strong&gt;context-filling&lt;/strong&gt; of spaced repetition flash cards
&lt;ul&gt;
&lt;li&gt;e.g. highlight a phrase to create a flash card; the necessary context is pulled in from surrounding paragraphs to make a coherent standalone flash card.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automatic &lt;strong&gt;connections&lt;/strong&gt; and graph construction:
&lt;ul&gt;
&lt;li&gt;Textual elements:
&lt;ul&gt;
&lt;li&gt;Entity extraction from notes (&amp;ldquo;implicit nodes&amp;rdquo;, e.g. &amp;ldquo;Bank of America&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Attribute extraction from notes (e.g. &amp;ldquo;incredible presentation by Pierre-Antoine&amp;rdquo; gets tagged as incredible or wow (the canonical form).)&lt;/li&gt;
&lt;li&gt;Relationship extraction (e.g. &amp;ldquo;Diamond Age by Neal Stephenson&amp;rdquo; -&amp;gt; creates an &amp;ldquo;author of&amp;rdquo; relationship)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Background knowledge elements:
&lt;ul&gt;
&lt;li&gt;e.g. knowing that Diamond Age is a book&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Writing prompt generator / &lt;strong&gt;Writing assistant&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overlap detection&lt;/strong&gt; between people&amp;rsquo;s graphs
&lt;ul&gt;
&lt;li&gt;The Go Note Go &amp;ldquo;clink&amp;rdquo; scenario&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete&lt;/strong&gt; (e.g. gmail tab completion)&lt;/li&gt;
&lt;li&gt;Improved &lt;strong&gt;spaced repetition algorithms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Mistake detection / &lt;strong&gt;fact checking&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summarization&lt;/strong&gt; of notes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Highlight extraction&lt;/strong&gt; from notes&lt;/li&gt;
&lt;li&gt;Suggesting &lt;strong&gt;new ideas&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Suggesting &lt;strong&gt;new online resources&lt;/strong&gt; to read / explore
&lt;ul&gt;
&lt;li&gt;Incl. articles, papers, YouTube videos, Suggesting &lt;strong&gt;people to reach out to&lt;/strong&gt; (e.g. because of their blog or Twitter or other things they&amp;rsquo;re written)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic search&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversational chat bots&lt;/strong&gt; for exploring the knowledge in a notebase&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-value-of-markautomationmark-for-note-taking&#34;&gt;The Value of &lt;mark&gt;Automation&lt;/mark&gt; for Note-Taking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Share notes&lt;/strong&gt; with people via their preferred messaging platform&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snooze notes&lt;/strong&gt; and ideas so you review them later&lt;/li&gt;
&lt;li&gt;Set pomodoros, alarms, and reminders to &lt;strong&gt;stay focused&lt;/strong&gt; and &lt;strong&gt;stay on task&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Note-taking &lt;strong&gt;via highlights&lt;/strong&gt; (e.g. with Browserflow)&lt;/li&gt;
&lt;li&gt;Note-taking &lt;strong&gt;via screenshots&lt;/strong&gt; (e.g. from YouTube)&lt;/li&gt;
&lt;li&gt;Automatic creation of &lt;strong&gt;spaced repetition from highlights&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bulk refactors&lt;/strong&gt; of note-taking&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pulling in context&lt;/strong&gt; from other sources (e.g. Warmly pulls LinkedIn info into Calendar, notes could pull info from wikipedia)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sync notes&lt;/strong&gt; between other sources and your notebase
&lt;ul&gt;
&lt;li&gt;Other people&amp;rsquo;s notes&lt;/li&gt;
&lt;li&gt;Your email client, calendar, TODO app, spaced repetition app, GitHub issues, other messaging services, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publishing&lt;/strong&gt; of notes to a webpage (either publicly or privately), or to social media&lt;/li&gt;
&lt;li&gt;New &lt;strong&gt;data entry&lt;/strong&gt; mechanisms: &lt;strong&gt;Go Note Go&lt;/strong&gt;, terminal, email, text, browsing history, location history, terminal history, IoT devices, etc&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spaced repetition&lt;/strong&gt; for studying&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inactivity reminders&lt;/strong&gt; (e.g. &amp;ldquo;it&amp;rsquo;s been three months since you&amp;rsquo;ve done a music activity&amp;rdquo;, or &amp;ldquo;it&amp;rsquo;s been over 6 months since you&amp;rsquo;ve spoken with David Dohan&amp;rdquo;, or &amp;ldquo;it&amp;rsquo;s been over a year since you&amp;rsquo;ve written about microbiology.&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Rough Note-taking Interop Requirements</title>
      <link>https://davidbieber.com/snippets/2021-10-10-note-taking-interop-requirements/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-10-10-note-taking-interop-requirements/</guid>
      
      <description>&lt;p&gt;Yesterday I mused about 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-10-09-note-taking-system-interop/&#34;&gt;the benefits an interoperability standard could provide&lt;/a&gt; to note-taking systems. Today, I extract rough requirements for such a standard from that musing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Note entry&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note entry projects need to be able to insert notes into a notebase regardless of which note-taking system is storing the notebase.&lt;/p&gt;
&lt;p&gt;This is critical for projects like 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-07-29-note-taking-flow/&#34;&gt;my Browserflow note-taking flows&lt;/a&gt; (which only support Roam right now) and 
&lt;a href=&#34;https://davidbieber.com/projects/go-note-go/&#34;&gt;Go Note Go&lt;/a&gt; to be multi-vendor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Restricted note entry&amp;rdquo;&lt;/strong&gt; allows an application like Go Note Go to insert notes into an application-specific section of the notes. In a &amp;ldquo;daily notes&amp;rdquo; oriented notebase like Roam, this is a &amp;ldquo;Go Note Go&amp;rdquo;-specific section on each daily notes page. In a page-oriented notebase, this can instead be an application specific page or namespace (e.g. &amp;ldquo;Go Note Go/*&amp;quot;) that notes can be inserted into. When using restricted note entry, an application can only insert notes into their own region of the notebase. This prevents the application from performing disruptive insertions that lower the quality of the notes outside of this region.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unrestricted note entry&lt;/strong&gt; allows an application to perform a broader set of inserts, not limited to a specific region of the notes. For a note-taking entry system that also allows browsing the notes, where a user might want to insert new notes alongside an existing note they&amp;rsquo;ve pulled up, this becomes important.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Note reading&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Individual note reading&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Batch note reading:&lt;/strong&gt; When notes are just text, reading large quantities of notes at a time becomes inexpensive. Often an entire text notebase is small enough to be kept in memory or transmitted over a network.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Incremental export&lt;/strong&gt; is critical for real-time features, such as collaborative note-taking across systems. Also necessary for this is support for a &lt;strong&gt;note view&lt;/strong&gt; and the ability to &lt;strong&gt;subscribe&lt;/strong&gt; to updates. Consider a collaborative note-taking experience. I&amp;rsquo;m taking notes in Roam, and one of my blocks is an embed of a page from your notes in Notion. As you make edits to the page in Notion, they should appear in my notes. If I have edit access on that page, I should be able to directly edit that page in my notes too, and you should see the results reflected in Notion in real time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For this to work, both note-taking systems could need to support the necessary parts of the standard. If instead, Notion lacked the real-time import capability, a half-baked experience of cross-system collaborative note-taking could still be possible. As edits in Notion get saved, they appear in real-time in Roam. When edits are made in Roam, Notion would only render them upon reloading the page.&lt;/p&gt;
&lt;p&gt;If a conflict is introduced to the intermediate representation, it could be handled gracefully through a CRDT. If instead a conflict is introduced on the note-taking system side of things, then that note-taking system is responsible for handling the conflict resolution as it sees fit.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;The above ideas taken together (and assumed idealized) can support the applications discussed yesterday: e.g. note entry systems like Go Note Go, advancements in spaced repetition, multiplayer spaced repetition, multiplayer note-taking, summarization features, highlight extraction features. What they don&amp;rsquo;t support is the development of UI widgets that can be developed once and deployed across any note-taking system. Supporting that type of integration would require a greater degree / different type of standardization.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Consider someone wanting to implement a summarization feature for note-taking systems, agnostic to the specific note-taking system being used. They train a machine learning model that can take a bunch of text notes and produce a quality summary. They implement a way for a user to efficiently select a collection of notes. The UI they choose allows searching by tags and keywords, navigating through the search results with the arrow keys and marking notes and their children for inclusion by pressing enter.&lt;/p&gt;
&lt;p&gt;When the user indicates they&amp;rsquo;ve selected the notes for summarization, they submit them to the feature&amp;rsquo;s ML system, which produces a summary.
if the user likes the summary, they accept it. When accepted, the feature inserts the summary into a dedicated Summarization specific section of the notes, complete with references to each of those notes used to produce the summary.&lt;/p&gt;
&lt;p&gt;This toy feature relies on having batch read access to the notes on the basis of a query, as well as restricted note entry permissions for writing notes back to the system. Using the hypothetical standard we are brainstorming toward in this snippet, such a system could be implemented once, but used by anyone with their notes in any of the note-taking systems that conform to these parts of the standard.&lt;/p&gt;
&lt;p&gt;An even better summarization feature would be one that doesn&amp;rsquo;t require the user to select the notes to summarize. It would automatically identify chunks of notes on a related topic, and summarize those. When it generates a summary, it would offer it to the user, along with mentioning which notes were used in the generation of the summary. The user could choose to accept the summary (in which case it would be saved as explained above), or not to. This version of the features requires whole-notebase access to implement, a slightly more permissive requirement than query-based access.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;What does such a &lt;em&gt;standard&lt;/em&gt; look like in practice? Maybe a useful analogy is thinking of it as an &amp;ldquo;LLVM&amp;rdquo; for notebases &amp;ndash; an &amp;ldquo;LLNB&amp;rdquo; if you will (unofficially standing for low level notebase, but not officially standing for anything&amp;hellip;)&lt;/p&gt;
&lt;p&gt;For each note-taking system we could implement a lossless bidirectional transform to a standard &amp;ldquo;intermediate representation&amp;rdquo;. Tools and plugins could be written to operate on this shared representation, and they could then be deployed against any note-taking system with supported transformations to and from the shared representation.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;intermediate representation&amp;rdquo; compiler analogy isn&amp;rsquo;t perfect though, since I don&amp;rsquo;t think it captures the desired incremental export, view, and subscription features we&amp;rsquo;d like in the LLNB system. We don&amp;rsquo;t want to have to process an entire notebase to get it&amp;rsquo;s LLNB form, and we don&amp;rsquo;t want to have to overwrite an entire notebase to update it from a modified LLNB. Critical to this working is having the LLNB track its own updates and be able to export just what has changed, and similarly having the note-taking systems able to report either a full update (if no state about the notebase is known), or just an incremental update (if the notebase state was already exported recently). One way to achieve this would be to have an API that gives a diff between an earlier state of a notebase (say, indicated by a commit hash or timestamp) and the current state.&lt;/p&gt;
&lt;p&gt;How about system-specific features? When features of a specific note-taking system X are used, they can appear in the intermediate representation as metadata. This metadata can be constituted appropriately when transferred back to X, or can be included as text if instead transferred to system Y. To make this concrete, support Notion has a geographic map feature that someone has used in their notes, but that is not supported by Roam. If the export their notes to LLNB, the map state is saved as e.g. {location: new jersey, zoom: 5}. If the notes are then imported back into Notion, the map will be restored. If instead the notes are imported into Roam, which lacks the map feature, the data about how the map feature will be included instead. So, if the notes are later exported from Roam and imported back into Notion, the map will be restored.&lt;/p&gt;
&lt;p&gt;If the state of some feature is complicated and not practically serializable as a note, it can be stored outside the notebase, e.g. in Dropbox or Google Drive or whatever is appropriate, with a reference to that external storage medium used as the state.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Note-taking System Interoperability</title>
      <link>https://davidbieber.com/snippets/2021-10-09-note-taking-system-interop/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-10-09-note-taking-system-interop/</guid>
      
      <description>&lt;p&gt;What would be a good &lt;em&gt;standard&lt;/em&gt; for note-taking software to use to support development of system-agnostic tools like Go Note Go? In this snippet I discuss the value such a standard could provide; I expect it will be useful in future brainstorming for what exactly would go into such a standard.&lt;/p&gt;
&lt;p&gt;I am building Go Note Go as a note-taking entry point, possibly with some basic retrieval features (e.g. &amp;ldquo;read back the last two notes I took&amp;rdquo;). I currently use Roam Research as my main note-taking system, but I&amp;rsquo;m not wedded to it forever.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;m building Go Note Go to work with any note-taking system. To do so, I need a distinct uploader implementation for every note-taking system that I support. I&amp;rsquo;m reaching out to the developers at the note-taking systems to assist with this effort. It would be lovely if there was a standard, to reduce the amount of work required here.&lt;/p&gt;
&lt;p&gt;For Go Note Go, only note &lt;em&gt;entry&lt;/em&gt; is required. If Go Note Go wanted to interact with the notes in a deeper way while continuing to support multiple note-taking systems (e.g. to support spaced repetition, or grocery lists, or reviewing a topic), then a standard would be even more important. Specialized implementations for each note-taking system would become largely untenable.&lt;/p&gt;
&lt;p&gt;It is both common and important that hobbyists develop tools for interacting with their notes. Roam Research has 
&lt;a href=&#34;https://roamjs.com/extensions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hundreds&lt;/a&gt; 
&lt;a href=&#34;https://roamresearch.com/#/app/roam-depot-developers/page/8yTj7WxQi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;of&lt;/a&gt; 
&lt;a href=&#34;https://bjosephburch.com/ultimate-roam-tool-kit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extensions&lt;/a&gt; developed by the Roam community. Obsidian has hundreds of 
&lt;a href=&#34;https://obsidian.md/plugins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;plugins&lt;/a&gt;. This is part of what makes these tools so powerful.&lt;/p&gt;
&lt;p&gt;To my knowledge, no one has written a tool for both Roam and Obsidian simultaneously. I want people to be able to make tools for all of Roam, Obsidian, IdeaFlow, Mem, RemNote, Notion, Logseq, Athens, Dendron, all the ones I don&amp;rsquo;t know about, and whatever comes next.&lt;/p&gt;
&lt;p&gt;Some of these tools will live inside the note-taking editor. Others, like Go Note Go, merely have to interact with the note-taking system, but do not need to become &lt;em&gt;part&lt;/em&gt; of the note-taking system.&lt;/p&gt;
&lt;p&gt;Some key areas where standards could provide value are: note representation, entry, navigation, editing, and search. Also valuable, but conceptually separate, would be a standard for UI extension.&lt;/p&gt;
&lt;p&gt;Standards would make the development of system-agnostic tools easier. This includes novel note entry systems (e.g. 
&lt;a href=&#34;https://davidbieber.com/projects/shh-shell&#34;&gt;shh-shell&lt;/a&gt; and 
&lt;a href=&#34;https://davidbieber.com/projects/go-note-go&#34;&gt;Go Note Go&lt;/a&gt;, but also note entry systems for new domains, such as for doctor&amp;rsquo;s offices or for while you&amp;rsquo;re cooking, or for use in virtual reality). It also would support advancements in spaced repetition, multiplayer note-taking, and would enable new features like note summarization and highlight extraction to become available in all the different note-taking systems at once.&lt;/p&gt;
&lt;p&gt;In addition to all these applications, standards will make import/export/backup tools easier to build. This can reduce vendor lock in, and more importantly can reduce data loss by enabling robust backups. Today, switching my notes to another system would be a small hassle (e.g. Handling block references in the transfer might require some specialized treatment. And I&amp;rsquo;d need to do some work to set up a spaced repetition system like the one I&amp;rsquo;m currently using in Roam.)&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll say a few words about some of these ideas that would benefit from standards.&lt;/p&gt;
&lt;p&gt;(1) &lt;strong&gt;Advancements in spaced repetition.&lt;/strong&gt; Having a spaced repetition system inside of a note-taking system is far lower friction than a separate app. Improvements to SRS that work across all note-taking systems would be warmly welcomed. I believe there are also significant advances to be made in community-scale spaced repetition, where cards and knowledge are drawn from not just your own notes, but from your community&amp;rsquo;s notes (including peers and teachers), and where your review schedule is similarly influenced not only by your own learning progress, but also by the progress of your community. This deserves a separate snippet, but I&amp;rsquo;ll note here a possibility that community-scale spaced repetition enables: it allows for community-level learning priorities, which may include diversity of topic. For example the members of a community might decide they want to ensure that all of its history is adequately studied (or any other collection of topics), not just the most interesting parts. Deciding individually, the members of the community might choose to study overly overlapping parts of its history. Using a community-scale spaced repetition algorithm, the choice of what to study can still predominantly be left up to individuals, but with small guidance from the centralized algorithm the community can ensure complete coverage of all the desired topics.&lt;/p&gt;
&lt;p&gt;(2) &lt;strong&gt;Multiplayer Note-taking&lt;/strong&gt; Let&amp;rsquo;s say I&amp;rsquo;m doing research on a topic, and a colleague is doing research on a related topic. I might want to search through my colleague&amp;rsquo;s notes, and reference some of them from my own notes. This isn&amp;rsquo;t even possible in most note-taking systems today, but I think is either a future or work-in-progress feature of Roam, Athens, and Obsidian. Being able to do this cross-system would be so much better than only being able to do it within a system. A standard agreed upon by the different note-taking system developers would be necessary to support this.&lt;/p&gt;
&lt;p&gt;(3) &lt;strong&gt;Summarization and highlight extraction&lt;/strong&gt; Summarization is a feature not yet present in any note-taking system, but surely one that will be added to many systems in the future. It is the ability to get a (machine generated) summary of a large chunk of notes automatically. This is marginally useful when reviewing your own notes, but is even more useful in conjunction with multiplayer features. Being able to view a summary of other people&amp;rsquo;s notes or an entire community&amp;rsquo;s notes will allow multiplayer systems to scale to larger groups of people while remaining useful. Highlight extraction is a related future feature, enabling users to quickly find the most important parts of a notebase. As with summarization, this is useful for an individuals notes, and doubly useful for a multiplayer notebase.&lt;/p&gt;
&lt;p&gt;For each of these ideas, standards would be useful for allowing feature development to benefit users of all systems simultaneously, and for allowing users of one note-taking system to benefit from notes taken in another system. The space of possible applications is also much larger than my brainstorming above indicates. Specifically, the set of domain-specific activities one might want to perform with their notes is quite large (planning a family gathering, studying for a med school exam, writing a novel, etc.) Specialized applications could be built for each of these, and it should not matter where the relevant notes were taken. Different systems will always have their pros and cons for different types of content, but we don&amp;rsquo;t need to reinvent the wheel so frequently for use-cases that make sense in the context of all these different systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Note Go is public</title>
      <link>https://davidbieber.com/snippets/2021-09-26-go-note-go/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-09-26-go-note-go/</guid>
      
      <description>&lt;p&gt;Go Note Go is public! I&amp;rsquo;ve been working on this for two weeks now, and today I made it public!&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://davidbieber.com/projects/go-note-go&#34;&gt;Read all about it here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What is it? Go Note Go is a note-taking system for when you’re on the go, with a focus on driving and camping.&lt;/p&gt;
&lt;p&gt;In short, it&amp;rsquo;s a portable keyboard with a microphone and speakers and a beautiful handheld button that you can use to take notes anywhere at all. Driving? Push the button and speak your notes. Camping? Type on the keyboard, powered by a battery pack. The battery lasts all day, and the notes will be uploaded to your central note-taking system as soon as internet becomes available.&lt;/p&gt;
&lt;p&gt;Have a look. Let me know what you think! I&amp;rsquo;ve been using it as I develop it over the last two weeks and I &lt;em&gt;really love&lt;/em&gt; it. I keep it by my computer during the work day. I took it with me to my table tennis tournament yesterday. I&amp;rsquo;ve brought it to the beach. There&amp;rsquo;s no cognitive overhead. There&amp;rsquo;s no latency to slow down your thinking. Just speak, or type, and it works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Browserflow Note-taking Flow</title>
      <link>https://davidbieber.com/snippets/2021-07-29-note-taking-flow/</link>
      <pubDate>Thu, 29 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-07-29-note-taking-flow/</guid>
      
      <description>&lt;p&gt;Quick update on the note-taking Browserflow flow I&amp;rsquo;ve been building: 
&lt;a href=&#34;https://browserflow.app/shared/51b5b7af-3124-4989-9771-36e9f236e1e7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://browserflow.app/shared/51b5b7af-3124-4989-9771-36e9f236e1e7&lt;/a&gt;:&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;When you run it, it injects some js into the page you&amp;rsquo;re viewing enabling a handful of keyboard shortcuts to enable clipping text into Roam from anywhere on the web.&lt;/p&gt;
&lt;p&gt;If you navigate to a new page, it will run that js on the new page. So it keeps the keyboard shortcuts active even if you follow links.&lt;/p&gt;
&lt;p&gt;It also removes the status overlay, so you can interact with the page more easily.&lt;/p&gt;
&lt;h2 id=&#34;the-keyboard-shortcuts-currently-are&#34;&gt;The keyboard shortcuts currently are:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enter&lt;/code&gt;: saves the current selection as a note to Roam&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q, !, @, *, &amp;gt;&lt;/code&gt;: saves the current selection as a note to Roam tagged as a {question, &amp;ldquo;Wow&amp;rdquo;, Share, key idea, or block quote} (I don&amp;rsquo;t really use these)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;: saves the paragraph containing the selection to Roam, with the selection highlighted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;: Asks for an element in browserflow. Saves a screenshot of the element to Roam. Doesn&amp;rsquo;t work. (hmm&amp;hellip; why not?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;: saves the sentence containing the selection to Roam, with the selection highlighted&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;: saves the sentence containing the selection to Roam as a &amp;ldquo;cloze&amp;rdquo; (fill-in-the-blank) task for spaced repetition, with the selection as the fill-in-the-blank&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;: (big cloze) saves the paragraph containing the selection to Roam as a &amp;ldquo;cloze&amp;rdquo; (fill-in-the-blank) task for spaced repetition, with the selection as the fill-in-the-blank&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;: quit (I use this to reenable keyboard shortcuts for tab switching)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;some-feature-requests--debug-things&#34;&gt;Some feature requests / debug things&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Would be nice to keep some status indicator, just in the corner or page title instead of blocking the full page.&lt;/li&gt;
&lt;li&gt;It depends on a couple other flows. Would be nice to be able to share just a single link.&lt;/li&gt;
&lt;li&gt;It switches to the roamresearch.com tab and back whenever you save a note. Would be nice if this worked even if roam were in a different window. The user shouldn&amp;rsquo;t have to care about exactly where roam is open.&lt;/li&gt;
&lt;li&gt;Why doesn&amp;rsquo;t the element screenshotting work?&lt;/li&gt;
&lt;li&gt;Would be nice to allow tab switching in a flow without having to quit the flow.&lt;/li&gt;
&lt;li&gt;For a note-taking flow like this, it can easily be running for hours. Doesn&amp;rsquo;t mix super well with the free tier of billing.&lt;/li&gt;
&lt;li&gt;A few of these could be solved with an &amp;ldquo;Enable interaction with page&amp;rdquo; action&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-dependency-flows-needed-to-check-it-out-are&#34;&gt;The dependency flows needed to check it out are:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://browserflow.app/shared/ba6eb2f0-a3d1-4bc3-9f21-5ca18af0b247&#34;&gt;https://browserflow.app/shared/ba6eb2f0-a3d1-4bc3-9f21-5ca18af0b247&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://browserflow.app/shared/486ef3eb-8d2b-48bf-8fee-22963dc74b88&#34;&gt;https://browserflow.app/shared/486ef3eb-8d2b-48bf-8fee-22963dc74b88&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://browserflow.app/shared/8e066128-2f87-468f-842f-3f006f0a2e71&#34;&gt;https://browserflow.app/shared/8e066128-2f87-468f-842f-3f006f0a2e71&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To try out the flow, you&amp;rsquo;ll need Browserflow, an open Roam tab, and all four flows linked in this snippet. Run the first flow (&amp;ldquo;Roam: Highlights&amp;rdquo;) on a web page (with Roam open in a different tab in the same window). Highlight some text, (say, the words &amp;ldquo;some text&amp;rdquo; in this sentence), and hit enter. You can try any of the shortcuts listed above. Notice as the flow copies your selection into your daily notes organized by time and website.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Two more Browserflow flows for Roam Research</title>
      <link>https://davidbieber.com/snippets/2021-02-13-flows-for-roam-research/</link>
      <pubDate>Sat, 13 Feb 2021 01:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-02-13-flows-for-roam-research/</guid>
      
      <description>&lt;p&gt;I wrote three Browserflow flows for Roam Research today. None of them took me more than 20-30 minutes to write. The first one was for saving the current webpage to Roam. I 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-02-13-saving-urls-to-roam-with-browserflow/&#34;&gt;wrote about that flow here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next flow I wrote is for saving any link you click on to Roam. The idea behind this flow is to prevent doing depth first exploration of the web. Better to look at a bunch of links and then later choose the most interesting, than to dive head first into the first link you click on.&lt;/p&gt;
&lt;p&gt;Video of that flow here:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/KMxnws2Laww&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;And then I also wrote a flow for saving highlights from any web page to Roam. You can see that flow in action here:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MaV0GP4sZoM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;In this flow, whenever I press enter the text I&amp;rsquo;ve highlighted is saved to my Roam Research Daily Notes page.&lt;/p&gt;
&lt;p&gt;Links to all the flows are in the video descriptions. Browserflow is currently in private beta. Looks like in the short-term DK will likely ask 
&lt;a href=&#34;https://www.notion.so/dkthehuman/Day-404-Choosing-My-Users-2a6b2c9cfc194fd3b561c370a62c60d5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;$20&lt;/a&gt; for access to the private beta. You can join the waitlist at 
&lt;a href=&#34;https://browserflow.app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;browserflow.app&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Saving URLs to Roam with Browserflow</title>
      <link>https://davidbieber.com/snippets/2021-02-13-saving-urls-to-roam-with-browserflow/</link>
      <pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-02-13-saving-urls-to-roam-with-browserflow/</guid>
      
      <description>&lt;p&gt;Using the 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-02-12-javascript-functions-for-inserting-blocks-in-roam/&#34;&gt;Roam JavaScript primitives I wrote yesterday&lt;/a&gt; it was extremely easy (less than 10 minutes, I think) to create a robust Browserflow flow for saving URLs to Roam Research.&lt;/p&gt;
&lt;p&gt;Now when I&amp;rsquo;m browsing the web, I can press cmd-J (Browserflow&amp;rsquo;s keyboard shortcut) and choose &amp;ldquo;Roam: Save URL&amp;rdquo; from the typeahead to save the current URL to my Roam Daily Notes page.&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s not already a &amp;ldquo;Saved URLs:&amp;rdquo; block on daily notes, it makes it. Then it nests the URL beneath.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the flow looks like in action:&lt;/p&gt;
&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/ORpBuE4UYSA&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Here&amp;rsquo;s what the flow itself looks like:&lt;/p&gt;
&lt;img src=&#34;save-urls-flow.png&#34;/&gt;
&lt;p&gt;Notice there are really only two meaningful lines of code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;let urls = await getOrCreateBlockOnPage($page, &#39;Saved URLs:&#39;, -1);
await createChildBlock(urls, $url)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line creates the &amp;ldquo;Saved URLs:&amp;rdquo; block, but only if it doesn&amp;rsquo;t already exist. It returns the uid of that block. The second line saves the url. Nothing else to it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taking Notes While Browsing the Web: An Idea for a Roam Research Plugin</title>
      <link>https://davidbieber.com/snippets/2020-05-15-roaming-the-web/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2020-05-15-roaming-the-web/</guid>
      
      <description>&lt;p&gt;As I&amp;rsquo;m browsing the web, I&amp;rsquo;d like to be able to take notes in 
&lt;a href=&#34;https://roamresearch.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Roam Research&lt;/a&gt;. In this post, I share an idea I have for a plugin or browser extension that I think would improve the experience of taking notes in Roam while browsing the web.&lt;/p&gt;
&lt;p&gt;The plugin would do two main things automatically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It would automatically insert some browsing history information into your Roam database while you browse the internet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As you navigate the web, it would automatically bring you to the Roam page that corresponds to the web page you&amp;rsquo;re reading.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mind-the-details&#34;&gt;Mind the Details&lt;/h2&gt;
&lt;p&gt;Of course, the implementation details matter! You don&amp;rsquo;t want to be whisked away from the notes you&amp;rsquo;re taking just because you&amp;rsquo;ve clicked a link in a different window.&lt;/p&gt;
&lt;p&gt;So, here I&amp;rsquo;ll explain a few of the details I think would make this a good note taking experience.&lt;/p&gt;
&lt;p&gt;As I&amp;rsquo;m browsing the internet, all the websites I visit will get added to a page &amp;ldquo;{Date} Browsing History&amp;rdquo;. A new Roam page will be created for each new website visited. And there will be a Roam window that always stays open to the Roam page for the current website I have open in my browser.&lt;/p&gt;
&lt;p&gt;What qualifies as a website?&lt;/p&gt;
&lt;p&gt;By default there would be one Roam page per &lt;em&gt;domain&lt;/em&gt; visited. However, there are several exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;Wikipedia&lt;/strong&gt; it would be one Roam page per Wikipedia entry&lt;/li&gt;
&lt;li&gt;For websites reached from &lt;strong&gt;HackerNews&lt;/strong&gt;, &lt;strong&gt;Twitter&lt;/strong&gt;, and &lt;strong&gt;Reddit&lt;/strong&gt;, it would be one Roam page per link followed from the aggregator (but links followed within the reached website would not count as new websites)&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;GitHub&lt;/strong&gt; it would be one Roam page per user, organization, or repo visited&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;Arxiv&lt;/strong&gt; it would be one Roam page per paper&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;Roam&lt;/strong&gt; it would be one Roam page per Roam database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It will be great to have a window that always stays open to the Roam page for the current website I have open in my browser. This way if I visit a website I&amp;rsquo;ve been to before, I will see my notes from that website. And the websites I visit will be linked to the day I visit them on, and also to any other pages my notes reference.&lt;/p&gt;
&lt;p&gt;Additionally, the tool should add a little bit of metadata to the pages it&amp;rsquo;s generating. On each of the autogenerated Roam pages, it would be great to see &lt;em&gt;when&lt;/em&gt; I visited the website, and what was the referring page. For websites visited multiple times, seeing the earliest and most recent visit times, and the number of times I visited that website would be useful too. Total time spent on the website would be a nice bonus.&lt;/p&gt;
&lt;h2 id=&#34;making-this-a-reality&#34;&gt;Making this a Reality&lt;/h2&gt;
&lt;p&gt;In the previous section I shared the details that I think would make this work well from a user experience perspective. How about from the technical side?&lt;/p&gt;
&lt;p&gt;I think it would make sense to implement this as a browser extension (though a 
&lt;a href=&#34;http://www.tampermonkey.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;user script&lt;/em&gt;&lt;/a&gt; could work too).

&lt;a href=&#34;http://dkthehuman.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DK the Human&lt;/a&gt;, author of the 
&lt;a href=&#34;https://chrome.google.com/webstore/detail/intention/dladanhaondcgpahgiflodhckhoeohoe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intention&lt;/a&gt; browser extension
has made his 
&lt;a href=&#34;https://github.com/dkthehuman/extension-starter-kit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;browser extension starter kit&lt;/a&gt; freely available.
To notice when what web page you&amp;rsquo;re browsing and determine whether it constitutes a new page, the extension would need to request permission to view your activity on all websites.
For making additions to a Roam database automatically, I expect the extension would have to navigate to the appropriate Roam page in the background, and would then mimic the user actions to make the desired changes.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in turning this idea into a reality or want to discuss it further, don&amp;rsquo;t hesitate to 
&lt;a href=&#34;mailto:david810&amp;#43;blog@gmail.com&#34;&gt;reach out&lt;/a&gt;! I&amp;rsquo;d be excited to try a workflow like this, but don&amp;rsquo;t anticipate building it myself in the near future.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>