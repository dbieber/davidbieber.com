<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Apps Script | David Bieber</title>
    <link>https://davidbieber.com/tags/google-apps-script/</link>
      <atom:link href="https://davidbieber.com/tags/google-apps-script/index.xml" rel="self" type="application/rss+xml" />
    <description>Google Apps Script</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 29 Dec 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>Google Apps Script</title>
      <link>https://davidbieber.com/tags/google-apps-script/</link>
    </image>
    
    <item>
      <title>Bieber Bot</title>
      <link>https://davidbieber.com/projects/bieber-bot/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://davidbieber.com/projects/bieber-bot/</guid>
      <description>&lt;p&gt;Bieber Bot is a highly motivated robot that assists me with my financials, 
&lt;a href=&#34;https://twitter.com/Bieber&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tweets&lt;/a&gt; on my behalf, and keeps me productive when my brain feels otherwise.&lt;/p&gt;
&lt;h2 id=&#34;is-bieber-bot-related-to-justin-bieber&#34;&gt;Is Bieber Bot related to Justin Bieber?&lt;/h2&gt;
&lt;p&gt;No, no relation. Bieber Bot is my own creation.&lt;/p&gt;
&lt;h2 id=&#34;how-does-bieber-bot-work&#34;&gt;How does Bieber Bot work?&lt;/h2&gt;
&lt;p&gt;I communicate with Bieber Bot primarily via Facebook messenger. Bieber Bot&amp;rsquo;s brain is a collection of Google Apps Scripts, and Bieber Bot&amp;rsquo;s memory is mostly spreadsheets in Google Sheets.&lt;/p&gt;
&lt;h2 id=&#34;does-bieber-bot-have-a-physical-form&#34;&gt;Does Bieber Bot have a physical form?&lt;/h2&gt;
&lt;p&gt;No, Bieber Bot isn&amp;rsquo;t a robot in the traditional sense of having actuators and interacting with its environment. Instead, Bieber Bot physically resides only in data centers around the world, and so Bieber Bot and I interact primarily via the internet. I&amp;rsquo;m slightly jealous of how much Bieber Bot gets to travel.&lt;/p&gt;
&lt;h2 id=&#34;what-does-bieber-bot-do&#34;&gt;What does Bieber Bot do?&lt;/h2&gt;
&lt;p&gt;Bieber Bot does a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bieber Bot manages my financials&lt;/li&gt;
&lt;li&gt;Bieber Bot tweets on my behalf&lt;/li&gt;
&lt;li&gt;Bieber Bot talks to me&lt;/li&gt;
&lt;li&gt;Bieber Bot keeps track of my TODOs&lt;/li&gt;
&lt;li&gt;Bieber Bot can suggest activities for me to do&lt;/li&gt;
&lt;li&gt;Bieber Bot reminds me to eat breakfast each morning&lt;/li&gt;
&lt;li&gt;Bieber Bot reminds me to take out the trash&lt;/li&gt;
&lt;li&gt;Bieber Bot asks me &amp;ldquo;is now a good time to do laundry?&amp;rdquo; at all the most inconvenient times&lt;/li&gt;
&lt;li&gt;Bieber Bot helps me to get to sleep at a reasonable hour&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;can-you-tell-me-all-of-bieber-bots-capabilities-again-but-this-time-make-each-one-into-a-pun-about-a-justin-bieber-song&#34;&gt;Can you tell me all of Bieber Bot&amp;rsquo;s capabilities again, but this time make each one into a pun about a Justin Bieber song?&lt;/h2&gt;
&lt;p&gt;Sure. See the hashtag 
&lt;a href=&#34;https://twitter.com/search?f=tweets&amp;amp;q=%23BieberBotPuns%20OR%20%23BieberBotPun&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#BieberBotPuns&lt;/a&gt; on twitter.&lt;/p&gt;
&lt;h2 id=&#34;can-i-use-bieber-bot&#34;&gt;Can I use Bieber Bot?&lt;/h2&gt;
&lt;p&gt;No, not at this time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Track of My Life in a Spreadsheet</title>
      <link>https://davidbieber.com/post/2019-12-29-track-your-life-in-a-spreadsheet/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      <guid>https://davidbieber.com/post/2019-12-29-track-your-life-in-a-spreadsheet/</guid>
      <description>&lt;p&gt;As many of my friends know, I keep track of much of my life in spreadsheets. There are several pieces to this system, but fortunately it&amp;rsquo;s the kind of system that you can adopt (and discard) incrementally. So, rather than explaining the whole thing in one go, I will explain one core piece in this post.&lt;/p&gt;
&lt;p&gt;In this post, I will detail how I use a spreadsheet as a &lt;em&gt;daily activity log&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;My spreadsheet lets me keep a record of all the things I&amp;rsquo;ve done.
It then also rolls up this data in interesting ways that help me with reflecting on and planning my life. Finally, it interacts with a bot system I&amp;rsquo;ve written for myself to help me keep my life on track.&lt;/p&gt;
&lt;p&gt;I will answer all of the following questions in this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s the organizational system?&lt;/li&gt;
&lt;li&gt;What are the main benefits of this system?&lt;/li&gt;
&lt;li&gt;Why is this system easy to adopt?&lt;/li&gt;
&lt;li&gt;Why is this system easy to keep doing for months on end, without forgetting?&lt;/li&gt;
&lt;li&gt;How does this system help me with planning my life?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-system&#34;&gt;The System&lt;/h3&gt;
&lt;p&gt;I have a single spreadsheet with columns &lt;em&gt;Evening&lt;/em&gt;, &lt;em&gt;Morning&lt;/em&gt;, &lt;em&gt;Keywords&lt;/em&gt;, &lt;em&gt;Weekday&lt;/em&gt;, &lt;em&gt;Date&lt;/em&gt;, &lt;em&gt;People&lt;/em&gt;, &lt;em&gt;Notes&lt;/em&gt;. In this sheet, I have a single row &lt;em&gt;per day&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The essense of the system is to jot down (1) what I do, and optionally (2) who I engage with each day.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t update the spreadsheet every day, usually just once a week or so I&amp;rsquo;ll fill in the activity from all of the missing days.&lt;/p&gt;
&lt;p&gt;This system serves several purposes, the main one being a journal of sorts so I can see a historical log of my activities. As you&amp;rsquo;ll see in the Planning and Notifications sections, it also helps me remember to regularly do all the activities I enjoy doing.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll start by providing a brief description of each column in the spreadsheet. Then we&amp;rsquo;ll get to discuss how I use the spreadsheet, and you&amp;rsquo;ll see why they&amp;rsquo;re each important to me. We&amp;rsquo;ll then also dive into all the benefits I get from this spreadsheet and the infrastructure I&amp;rsquo;ve built up around it.&lt;/p&gt;
&lt;h4 id=&#34;column-descriptions&#34;&gt;Column Descriptions&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Evening&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;A single cell in which to put the main activity I did in the evening (e.g. after work) on that day.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Morning&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Optional, Text, infrequently used&lt;/td&gt;
&lt;td&gt;The main activity I did in the morning (e.g. before work) on that day.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Keywords&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Optional, comma separated&lt;/td&gt;
&lt;td&gt;Keywords describing the activities of that day.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Weekday&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Filled automatically&lt;/td&gt;
&lt;td&gt;The day of the week, e.g. Thursday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Date&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Filled automatically&lt;/td&gt;
&lt;td&gt;The date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;People&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Names, comma separated&lt;/td&gt;
&lt;td&gt;A list of the people I engaged with on that day&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Notes&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Optional, Text&lt;/td&gt;
&lt;td&gt;A bit like a diary, this is a place to jot down additional notes about the day.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Really all of the columns are optional, but the ones that are particularly optional are marked as such.&lt;/p&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;Now I&amp;rsquo;ll describe the data entry process, and then all the ways I take advantage of this data.&lt;/p&gt;
&lt;h4 id=&#34;data-entry&#34;&gt;Data Entry&lt;/h4&gt;
&lt;p&gt;About once a week on average I&amp;rsquo;ll go to the spreadsheet, and fill in all the activities I did since the last time I updated the sheet.&lt;/p&gt;
&lt;p&gt;For each day, I try to capture just the main one to two outside-of-work activities that I engaged in. It&amp;rsquo;s totally fine if I don&amp;rsquo;t capture every little thing, and it&amp;rsquo;s also fine if there are some days that I didn&amp;rsquo;t do anything of note.&lt;/p&gt;
&lt;p&gt;I said above that I do this about once a week, but there&amp;rsquo;s no strong rhythm to it; sometimes I do it every day for multiple consecutive days, and sometimes I&amp;rsquo;ll go multiple weeks between updating the sheet.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using this system reliably since mid-2018, and it&amp;rsquo;s served me well. The notifications that we&amp;rsquo;ll get to shortly, combined with the simplicity of the method (just one cell to fill in per day), have allowed me to keep using this system without being disrupted by travel or high-workload parts of life.&lt;/p&gt;
&lt;h4 id=&#34;planning&#34;&gt;Planning&lt;/h4&gt;
&lt;p&gt;I have a second sheet that is updated automatically using data from the sheet I&amp;rsquo;ve been describing so far. This sheet has one row &lt;em&gt;per activity&lt;/em&gt; that I enjoy engaging in.&lt;/p&gt;
&lt;p&gt;The most important columns in this sheet are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Category&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;The category of the activity (e.g. Athletic).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Activity&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;An activity that I enjoy engaging in. (e.g. Skiing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Last Date&lt;/td&gt;
&lt;td&gt;Filled automatically&lt;/td&gt;
&lt;td&gt;The most recent date on which I engaged in the activity.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;Last Date&lt;/code&gt; column is filled automatically using the data from the main sheet. The Google Sheets formula that fills in this column is a query a bit like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;=IFERROR(QUERY(scheduled,
   &amp;quot;select E
    where A contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39;
      OR B contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39;
      OR C contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39;
    order by E desc
    limit 1
    label E &#39;&#39;&amp;quot;
))
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C2&lt;/code&gt; refers to the &lt;code&gt;Activity&lt;/code&gt; from the current sheet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A&lt;/code&gt; is the &lt;code&gt;Evening&lt;/code&gt; column from the Data Entry sheet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B&lt;/code&gt; is the &lt;code&gt;Morning&lt;/code&gt; column from the Data Entry sheet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; is the &lt;code&gt;Keywords&lt;/code&gt; column from the Data Entry sheet&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt; is the &lt;code&gt;Date&lt;/code&gt; from the Data Entry sheet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This lets me quickly see, for each activity that I enjoy, how recently I&amp;rsquo;ve done that activity. For example, I see that I haven&amp;rsquo;t gone camping since 2019-07-05, I haven&amp;rsquo;t played tennis since 2018-07-31, and I haven&amp;rsquo;t gone swimming since 2019-10-07. Really overdue for some tennis!&lt;/p&gt;
&lt;p&gt;My spreadsheet also rolls up this data further, by category. I can quickly see how recently I&amp;rsquo;ve done any activity in a given category.&lt;/p&gt;
&lt;p&gt;The categories I use are:
&amp;ldquo;Athletic&amp;rdquo;, &amp;ldquo;Civic Something Or Other&amp;rdquo;, &amp;ldquo;Day Trips&amp;rdquo;, &amp;ldquo;Educational&amp;rdquo;, &amp;ldquo;Entertainment&amp;rdquo;, &amp;ldquo;Family&amp;rdquo;, &amp;ldquo;Financial&amp;rdquo;, &amp;ldquo;Food&amp;rdquo;, &amp;ldquo;Music + Arts&amp;rdquo;, &amp;ldquo;Outdoorsy&amp;rdquo;, &amp;ldquo;Personal Projects&amp;rdquo;, &amp;ldquo;Puzzles&amp;rdquo;, &amp;ldquo;Social&amp;rdquo;, &amp;ldquo;Social Games&amp;rdquo;, and &amp;ldquo;Well being&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Here you can see how recently I&amp;rsquo;ve done something in each of the categories.&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidbieber.com/post/2019-12-29-track-your-life-in-a-spreadsheet/i-activities-by-category_hu2806f35bd91a07c85620e1b361834210_97421_2000x2000_fit_box_2.png&#34; &gt;


  &lt;img data-src=&#34;https://davidbieber.com/post/2019-12-29-track-your-life-in-a-spreadsheet/i-activities-by-category_hu2806f35bd91a07c85620e1b361834210_97421_2000x2000_fit_box_2.png&#34; class=&#34;lazyload&#34; alt=&#34;A two-column spreadsheet showing how recently I&amp;#39;ve done an activity in each of the 15 activity categories.&#34; width=&#34;200px&#34; height=&#34;732&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;As you can see, I&amp;rsquo;m doing a pretty good job of doing most of the categories of activities. When I go to make plans next, I&amp;rsquo;ll most likely schedule activities from the bottom categories. For example, I may do a financial review, schedule a board game night, and plan to attend a City Council meeting.&lt;/p&gt;
&lt;h4 id=&#34;notifications&#34;&gt;Notifications&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;ve also given 
&lt;a href=&#34;https://davidbieber.com/projects/bieber-bot/&#34;&gt;Bieber Bot&lt;/a&gt; (my digital personal assistant and robot friend) access to this data, and he helps me make better use of it.&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s been too long since I&amp;rsquo;ve scheduled an activity in any particular category, Bieber Bot will message me on FB Messenger reminding me to schedule something in that category.&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidbieber.com/post/2019-12-29-track-your-life-in-a-spreadsheet/i-bieberbot-financial_huf983f5ecddfe8f1a3e2e0cb4f01b88c8_58408_2000x2000_fit_box_2.png&#34; &gt;


  &lt;img data-src=&#34;https://davidbieber.com/post/2019-12-29-track-your-life-in-a-spreadsheet/i-bieberbot-financial_huf983f5ecddfe8f1a3e2e0cb4f01b88c8_58408_2000x2000_fit_box_2.png&#34; class=&#34;lazyload&#34; alt=&#34;A message from Bieber Bot reminding me that it&amp;#39;s been a while since I scheduled a Financial activity.&#34; width=&#34;350px&#34; height=&#34;240&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Similarly BieberBot will remind me each day of any upcoming activities planned for that day.
And if I don&amp;rsquo;t have any activity planned for a particular day, BieberBot may take the liberty of suggesting an activity.&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://davidbieber.com/post/2019-12-29-track-your-life-in-a-spreadsheet/i-bieberbot-hudson_hued59abe63d99bee46aaa05358969b28a_120266_2000x2000_fit_box_2.png&#34; &gt;


  &lt;img data-src=&#34;https://davidbieber.com/post/2019-12-29-track-your-life-in-a-spreadsheet/i-bieberbot-hudson_hued59abe63d99bee46aaa05358969b28a_120266_2000x2000_fit_box_2.png&#34; class=&#34;lazyload&#34; alt=&#34;A message from Bieber Bot suggesting I take a walk along the Hudson River.&#34; width=&#34;350px&#34; height=&#34;360&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Finally BieberBot will also remind me if I haven&amp;rsquo;t been entering activities into the spreadsheet in a while, so I don&amp;rsquo;t fall too far behind on the logging system.&lt;/p&gt;
&lt;p&gt;Setting up these notifcations is a bit outside the scope of this post, but if it interests you how BieberBot works, you can subscribe for future posts here:&lt;/p&gt;

&lt;link href=&#34;//cdn-images.mailchimp.com/embedcode/classic-10_7.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt;
&lt;style type=&#34;text/css&#34;&gt;
  #mc_embed_signup{
    background:#fff;
    clear:left;
    font:14px Helvetica,Arial,sans-serif;
  }
&lt;/style&gt;
&lt;div id=&#34;mc_embed_signup&#34;&gt;
&lt;form action=&#34;https://gmail.us3.list-manage.com/subscribe/post?u=a55774562ae9fa9a1d879fa75&amp;amp;id=132f89def3&#34; method=&#34;post&#34; id=&#34;mc-embedded-subscribe-form&#34; name=&#34;mc-embedded-subscribe-form&#34; class=&#34;validate&#34; target=&#34;_blank&#34; novalidate&gt;
    &lt;div id=&#34;mc_embed_signup_scroll&#34;&gt;
  
&lt;div class=&#34;mc-field-group&#34;&gt;
  &lt;label for=&#34;mce-EMAIL&#34;&gt;Email Address&lt;/label&gt;
  &lt;input type=&#34;email&#34; value=&#34;&#34; name=&#34;EMAIL&#34; class=&#34;required email&#34; id=&#34;mce-EMAIL&#34;&gt;
&lt;/div&gt;
  &lt;div id=&#34;mce-responses&#34; class=&#34;clear&#34;&gt;
    &lt;div class=&#34;response&#34; id=&#34;mce-error-response&#34; style=&#34;display:none&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;response&#34; id=&#34;mce-success-response&#34; style=&#34;display:none&#34;&gt;&lt;/div&gt;
  &lt;/div&gt;    
    &lt;div style=&#34;position: absolute; left: -5000px;&#34; aria-hidden=&#34;true&#34;&gt;&lt;input type=&#34;text&#34; name=&#34;b_a55774562ae9fa9a1d879fa75_132f89def3&#34; tabindex=&#34;-1&#34; value=&#34;&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;clear&#34;&gt;
      &lt;input type=&#34;submit&#34; value=&#34;Subscribe&#34; name=&#34;subscribe&#34; id=&#34;mc-embedded-subscribe&#34; class=&#34;button&#34;&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;script type=&#39;text/javascript&#39; src=&#39;//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js&#39;&gt;&lt;/script&gt;
&lt;script type=&#39;text/javascript&#39;&gt;(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]=&#39;EMAIL&#39;;ftypes[0]=&#39;email&#39;;fnames[1]=&#39;FNAME&#39;;ftypes[1]=&#39;text&#39;;fnames[2]=&#39;LNAME&#39;;ftypes[2]=&#39;text&#39;;fnames[3]=&#39;ADDRESS&#39;;ftypes[3]=&#39;address&#39;;fnames[4]=&#39;PHONE&#39;;ftypes[4]=&#39;phone&#39;;fnames[5]=&#39;BIRTHDAY&#39;;ftypes[5]=&#39;birthday&#39;;}(jQuery));var $mcj = jQuery.noConflict(true);&lt;/script&gt;

&lt;p&gt;You can also learn a bit more about BieberBot 
&lt;a href=&#34;https://davidbieber.com/projects/bieber-bot/&#34;&gt;here&lt;/a&gt;, but there&amp;rsquo;s so much more to be written.&lt;/p&gt;
&lt;h4 id=&#34;archiving-old-events&#34;&gt;Archiving Old Events&lt;/h4&gt;
&lt;p&gt;To keep things clean, my spreadsheet also uses Google Apps Script to archive old events. You can see the code I use for the auto-archiving 
&lt;a href=&#34;https://gist.github.com/dbieber/42153e6a27382ba6193f108c13b84cf9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h4&gt;
&lt;p&gt;If this system sounds appealing to you, it&amp;rsquo;s very simple to get started.&lt;/p&gt;
&lt;p&gt;Simply create a new Google sheet with the columns you&amp;rsquo;d like to track. I use the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;Evening&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Morning&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Keywords&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Weekday&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Date&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;People&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Notes&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;But for just getting started you might be satisfied with something simpler, say just these three columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;Activity&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Weekday&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Date&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;You can use the formula &lt;code&gt;=TEXT(WEEKDAY(E3), &amp;quot;dddd&amp;quot;)&lt;/code&gt; to autopopulate the &lt;code&gt;Weekday&lt;/code&gt; column, where E3 represents the date (tip: you can use cmd-; to enter today&amp;rsquo;s date into a cell).&lt;/p&gt;
&lt;p&gt;I also create a second sheet called &lt;code&gt;Archive&lt;/code&gt; with the same columns as the main sheet, and use the 
&lt;a href=&#34;https://gist.github.com/dbieber/42153e6a27382ba6193f108c13b84cf9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;auto-archiving feature&lt;/a&gt; mentioned earlier to prevent the main sheet from getting cluttered.&lt;/p&gt;
&lt;p&gt;Next create the analysis sheet with the columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;Category&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Activity&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;&lt;em&gt;Last Date&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;The first two columns you can fill in with whatever categories and activities you like, and you can add new categories and activities at any time. No need to fill this in too much until you start to see how you&amp;rsquo;re using the main sheet.&lt;/p&gt;
&lt;p&gt;To autofill the &lt;code&gt;Last Date&lt;/code&gt; column, the full formula I use is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;=MAX(
  IFERROR(QUERY(scheduled, 
    &amp;quot;select E
    where A contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39; OR B contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39; or C contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39;
    order by E desc
    limit 1
    label E &#39;&#39;&amp;quot;
  )),
  IFERROR(QUERY(archive, 
    &amp;quot;select E
    where A contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39; OR B contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39; or C contains &#39;&amp;quot; &amp;amp; C2 &amp;amp; &amp;quot;&#39;
    order by E desc
    limit 1
    label E &#39;&#39;&amp;quot;
  ))
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This searches both the main sheet (scheduled) and the archive sheet for the most recent occurrence of each activity (C2). For this to work, the rows in the archive and main sheet need to be in reverse chronological order.&lt;/p&gt;
&lt;p&gt;Finally, to get the roll-up by category, I use the following Google Sheets formula:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;=QUERY(A:E,
       &amp;quot;select B, max(D), count(B) where B&amp;lt;&amp;gt;&#39;&#39; group by B order by max(D) desc
        label max(D) &#39;Last date&#39;,
              count(B) &#39;Count&#39;
       &amp;quot;, -1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though I would like to, I won&amp;rsquo;t go into how to set up the notifications in this post. For now, that&amp;rsquo;s just between me and 
&lt;a href=&#34;https://davidbieber.com/projects/bieber-bot/&#34;&gt;BieberBot&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;As a quick recap of my system:
(1) I manually enter the activity(s) I do each day; (2) the spreadsheet automatically figures out how recently I did each category of activity; (3) bonus: BieberBot uses this data to help me keep my life on track.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using this system for about 18 months now, and I&amp;rsquo;ve been quite happy with the insight it provides and how helpful it is for planning.&lt;/p&gt;
&lt;p&gt;Still, there are many pieces of my system left undiscussed: tracking financial transactions, taking notes on academic papers, staying in touch with friends and colleagues, dealing with social media, and more! I&amp;rsquo;d love to tell you about the rest, so stay tuned. And don&amp;rsquo;t hesitate to 
&lt;a href=&#34;mailto:david810&amp;#43;blog@gmail.com&#34;&gt;reach out&lt;/a&gt; if you&amp;rsquo;d like to discuss anything you read. I hope you find this useful, and do let me know if you start using a spreadsheet to track your own life or have a system of your own.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing a Mail Merge in Google Apps Script</title>
      <link>https://davidbieber.com/post/2018-10-21-apps-script-mail-merge/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://davidbieber.com/post/2018-10-21-apps-script-mail-merge/</guid>
      <description>&lt;p&gt;Google Apps Script is endlessly useful; in this post you will learn how to write a mail merge with Google Apps Script. It&amp;rsquo;s less than 30 lines of code! You can use this technique to send personalized emails individually to many recipients. In the second part of this post, you will learn how to schedule these emails to send in the future.&lt;/p&gt;
&lt;h2 id=&#34;part-1-writing-a-mail-merge&#34;&gt;Part 1: Writing a Mail Merge&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;mail merge&lt;/em&gt; is a program that sends an email to many recipients, automatically filling in the contents of the email according to a template. It&amp;rsquo;s like a form letter. Each recipient receives a personalized copy of the email.&lt;/p&gt;
&lt;p&gt;In this section we use Google Apps Script to create a mail merge that sends personalized &amp;ldquo;Happy Birthday&amp;rdquo; messages to a group of our friends. This will involve writing a template email, creating a spreadsheet, and writing a small amount of JavaScript code. With practice, you can perform tasks like this in well under an hour.&lt;/p&gt;
&lt;p&gt;First, we draft the email in Gmail. We&amp;rsquo;ll use angle brackets for the parts of the message we want to replace with data from our spreadsheet.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Subject:
  Happiest Birthday!

Body:
  Dear &amp;lt;name&amp;gt;,

  Happy birthday! I think you, &amp;lt;name&amp;gt;, personally are awesome.
  You may be getting older, but you&#39;re still the coolest person I know.
  What are you now, &amp;lt;age&amp;gt;? Wow.

  Party on!
  David
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we create a Google Spreadsheet (
&lt;a href=&#34;https://sheets.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sheets.google.com&lt;/a&gt;) with three columns like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Name  Email  Age  
...   ...    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(To add yourself to my spreadsheet and actually receive a happy birthday email on your alleged birthday, just 
&lt;a href=&#34;https://goo.gl/forms/qEy8f5CQ8itVVFoe2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fill out this form&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Inside your spreadsheet, choose &lt;em&gt;Tools &amp;gt; Script Editor&lt;/em&gt;. This creates a new Apps Script associated with your spreadsheet.&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s time to write some JavaScript. We&amp;rsquo;re going to write a function to perform the mail merge.
We&amp;rsquo;ll call it &lt;code&gt;performMailMerge&lt;/code&gt; and it won&amp;rsquo;t have any parameters, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function performMailMerge() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will use the built in SpreadsheetApp library to access the spreadsheet, the SpreadsheetDB library to perform basic data lookup operations on the spreadsheet, and the built in GmailApp library to look up drafts and send emails.&lt;/p&gt;
&lt;p&gt;SpreadsheetDB is a small library (a collection of useful functions) that allows us to quickly process rows in a spreadsheet, referencing columns by their header names. Choose one of the two options below for using SpreadsheetDB.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To use the library SpreadsheetDB, choose Resources &amp;gt; Libraries &amp;gt; Add a library and enter &lt;code&gt;193p7IxBukPVkoxwMH8UDcdkYJiNCDWSylMA_htgliEPxjjqixhzKt_2g&lt;/code&gt;. This is the ID of the SpreadsheetDB library. Select the latest version from the version dropdown menu. It should say &amp;ldquo;SpreadsheetDB&amp;rdquo; if you&amp;rsquo;ve done it right. This will allow you to use functions from the SpreadsheetDB library in your project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use SpreadsheetDB from source, create a new file in your project and name it &lt;code&gt;spreadsheet.gs&lt;/code&gt; (the name is not important). Copy and paste in the source of SpreadsheetDB from the 
&lt;a href=&#34;https://gist.github.com/dbieber/471a3103adb727d6985892338de00aea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gist here&lt;/a&gt;. If you choose to copy and paste the source into your project, then you must omit the prefix &amp;ldquo;SpreadsheetDB.&amp;rdquo; from your calls to the SpreadsheetDB functions in the following code. E.g. &lt;code&gt;SpreadsheetDB.getColumnIndexesFromSheet&lt;/code&gt; would become just &lt;code&gt;getColumnIndexesFromSheet&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that you&amp;rsquo;re set up with SpreadsheetDB, I&amp;rsquo;ll start by showing you the full program, then I&amp;rsquo;ll explain what each line does.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function performMailMerge() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName(&amp;quot;Sheet 1&amp;quot;);
  var indexes = SpreadsheetDB.getColumnIndexesFromSheet(sheet);
  var subject = &amp;quot;Happiest Birthday!&amp;quot;;
  var draftMessage = getDraftMessageBySubject(subject);
  var templateBody = draftMessage.getPlainBody();
  SpreadsheetDB.forEachRow(sheet, function(row) {
    var name = row[indexes[&amp;quot;Name&amp;quot;]];
    var email = row[indexes[&amp;quot;Email&amp;quot;]];
    var age = row[indexes[&amp;quot;Age&amp;quot;]];
    
    var body = templateBody.replace(/&amp;lt;name&amp;gt;/g, name).replace(/&amp;lt;age&amp;gt;/g, age);
    GmailApp.sendEmail(email, subject, body);
  });
}

function getDraftMessageBySubject(subject) {
  var draftMessages = GmailApp.getDraftMessages();
  for (var i = 0; i &amp;lt; draftMessages.length; i++) {
    var draftMessage = draftMessages[i];
    if (draftMessage.getSubject() == subject) {
      return draftMessage;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The documentation for the built in libraries is very good. You can find the documentation for 
&lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpreadsheetApp&lt;/a&gt; here and for 
&lt;a href=&#34;https://developers.google.com/apps-script/reference/gmail/gmail-app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GmailApp&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;Let’s look at the pieces of this function individually:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
var sheet = spreadsheet.getSheetByName(&amp;quot;Sheet 1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives us a 
&lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/sheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sheet&lt;/a&gt; object that we can use to access and edit the main sheet of our spreadsheet.&lt;/p&gt;
&lt;p&gt;The function call SpreadsheetDB.getColumnIndexesFromSheet(sheet) gives us back a mapping from column name to index. This is useful for accessing elements of a row by name later on. In our case, the result of getColumnIndexesFromSheet is the following mapping: &lt;code&gt;{Name: 0, Email: 1, Age: 2}&lt;/code&gt;. This means that Name is column index 0, Email is column index 1, and Age is column index 2. We’re counting columns starting with zero. Perfect!&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;getDraftMessageBySubject&lt;/code&gt; gets a draft from our Gmail drafts that we’ll use later to send the emails to our friends.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;SpreadsheetDB.forEachRow&lt;/code&gt; function to perform an action for each row in the spreadsheet except the headers. We pass a function with no name (an &amp;ldquo;anonymous function&amp;rdquo;) to SpreadsheetDB, and SpreadsheetDB will call that function once per non-header row of our spreadsheet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    var name = row[indexes[&amp;quot;Name&amp;quot;]];
    var email = row[indexes[&amp;quot;Email&amp;quot;]];
    var age = row[indexes[&amp;quot;Age&amp;quot;]];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The input to our anonymous function, row, is an array with the contents of the row currently being processed. From earlier, indexes[&amp;ldquo;Name&amp;rdquo;] is 0, indexes[&amp;ldquo;Email&amp;rdquo;] is 1, and indexes[&amp;ldquo;Age&amp;rdquo;] is 2. We can use this to get the name, email, and age of one of our friends from the spreadsheet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var body = templateBody.replace(/&amp;lt;name&amp;gt;/g, name).replace(/&amp;lt;age&amp;gt;/g, age);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where the textual replacement actually happens. &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is replaced with your friend&amp;rsquo;s name. &lt;code&gt;&amp;lt;age&amp;gt;&lt;/code&gt; is replaced with your friend&amp;rsquo;s age. The &amp;lsquo;g&amp;rsquo; indicates that a &amp;ldquo;global&amp;rdquo; replacement should be performed, so every time the string &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; appears it will be replaced by the name of your friend from the spreadsheet. Without the &amp;lsquo;g&amp;rsquo;, only the first occurence of &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; would be replaced.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;GmailApp.sendMail(email, subject, body);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last, this line sends the email!&lt;/p&gt;
&lt;p&gt;Since this is JavaScript, you can comment out lines by putting &lt;code&gt;//&lt;/code&gt; at the start of the line. Everything occuring after &lt;code&gt;//&lt;/code&gt; on the line will have no affect.&lt;/p&gt;
&lt;p&gt;I recommend commenting out the GmailApp.sendMail line before running this for the first time to so that you don&amp;rsquo;t accidently email people incorrectly.&lt;/p&gt;
&lt;p&gt;Add the line &lt;code&gt;Logger.log(&amp;quot;To: &amp;quot; + email); Logger.log(&amp;quot;Subj: &amp;quot; + subject); Logger.log(&amp;quot;Body: &amp;quot; + body);&lt;/code&gt; in place of the GmailApp.sendMail line until you&amp;rsquo;re convinced that the correct emails are going to be sent to the correct people. Only once you are sure it&amp;rsquo;s working as intended, uncomment the GmailApp.sendMail line so it actually sends the emails.&lt;/p&gt;
&lt;p&gt;To run the performMailMerge function, choose performMailMerge from the dropdown and click the run (right-arrow) button.
To see your logs (the inputs to the Logger.log function calls), choose &amp;ldquo;View &amp;gt; Logs&amp;rdquo; or press ctrl-Enter or cmd-Enter.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/da2acd06f66fb2c9b6f6e68f046029de/tumblr_pgyx7hQlOL1rfccnto1_1280.png&#34; alt=&#34;Apps Script menu bar: Run button&#34; style=&#34;width:700px;&#34;&gt;
&lt;p&gt;That&amp;rsquo;s it. When you run performMailMerge, the emails will be sent with the values from the spreadsheet substituted for the &amp;ldquo;&lt;name&gt;&amp;rdquo; and &amp;ldquo;&lt;age&gt;&amp;rdquo; placeholders in the draft. Once you&amp;rsquo;ve got the hang of this, let&amp;rsquo;s add a few finishing touches before moving on to scheduling emails to be sent in the future.&lt;/p&gt;
&lt;h3 id=&#34;finishing-touches&#34;&gt;Finishing Touches&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Finishing touch 1:&lt;/em&gt; Adding a &amp;ldquo;Status&amp;rdquo; column to avoid emailing people twice.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Name  Email  Age  Status
...   ...    ...  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s add some finishing touches. Add to your spreadsheet a new column &amp;ldquo;Status&amp;rdquo;. When an email sends successfully, we&amp;rsquo;ll set the status of the row to &amp;ldquo;Done&amp;rdquo;. If the status of a row is already &amp;ldquo;Done&amp;rdquo;, we&amp;rsquo;ll skip that row. The updated code is shown here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function performMailMerge() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName(&amp;quot;Sheet 1&amp;quot;);
  var indexes = SpreadsheetDB.getColumnIndexesFromSheet(sheet);
  var subject = &amp;quot;Happiest Birthday!&amp;quot;;
  var draftMessage = getDraftMessageBySubject(subject);
  var templateBody = draftMessage.getPlainBody();
  SpreadsheetDB.forEachRow(sheet, function(row) {
    var name = row[indexes[&amp;quot;Name&amp;quot;]];
    var email = row[indexes[&amp;quot;Email&amp;quot;]];
    var age = row[indexes[&amp;quot;Age&amp;quot;]];
    var status = row[indexes[&amp;quot;Status&amp;quot;]];
    
    if (status == &amp;quot;Done&amp;quot;) {
      return;
    }
    
    var body = templateBody.replace(/&amp;lt;name&amp;gt;/g, name).replace(/&amp;lt;age&amp;gt;/g, age);
    GmailApp.sendEmail(email, subject, body);
    
    row[indexes[&amp;quot;Status&amp;quot;]] = &amp;quot;Done&amp;quot;;
    return row;
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to make this change, we just check the value of &lt;code&gt;row[indexes[&amp;quot;Status&amp;quot;]]&lt;/code&gt;, and use a return statement to skip the row if the status is &amp;ldquo;Done&amp;rdquo;.
In order to update the row, we modify the &lt;code&gt;row&lt;/code&gt; array and return it and SpreadsheetDB takes care of updating the underlying spreadsheet.&lt;/p&gt;
&lt;p&gt;With this change in place, we can now add new recipients to our spreadsheet even after having run the performMailMerge function, and if we run performMailMerge again we won&amp;rsquo;t email anyone who has already received an email.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Finishing touch 2:&lt;/em&gt; Adding a menu item that triggers our function.&lt;/p&gt;
&lt;p&gt;When we created our Apps Script, it was automatically associated with our spreadsheet. If we add a function named &lt;code&gt;onOpen()&lt;/code&gt; to our Apps Script, it will automatically get run when the associated spreadsheet is opened. We can add a menu item to our spreadsheet by writing an onOpen function like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function onOpen() {
  SpreadsheetApp.getUi()
  .createMenu(&#39;Mail Merge&#39;)
  .addItem(&#39;Send Emails&#39;, &#39;performMailMerge&#39;)
  .addToUi();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go ahead and refresh your spreadsheet. You should now see a menu called &amp;ldquo;Mail Merge&amp;rdquo; with a menu item &amp;ldquo;Send Emails&amp;rdquo;. Selecting &amp;ldquo;Send Emails&amp;rdquo; will cause your performMailMerge function to be run.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/bba93c6c694c1ed6196e86baa1307648/tumblr_pgyxyq8CVX1rfccnto1_1280.png&#34; alt=&#34;Mail merge custom menu bar&#34; style=&#34;width:700px;&#34;&gt;
&lt;h2 id=&#34;part-2-scheduling-emails-for-the-future&#34;&gt;Part 2: Scheduling Emails for the Future&lt;/h2&gt;
&lt;p&gt;In Part 1 we wrote a mail merge function that emails our friends &amp;ldquo;personalized&amp;rdquo; Happy Birthday messages when we run performMailMerge. But why would we want to say happy birthday to all our friends at once? That&amp;rsquo;s silly, it makes much more sense to send them a happy birthday message &lt;em&gt;on their birthday&lt;/em&gt;. In this section, we&amp;rsquo;ll modify our mail merge to send emails only on the birthday of the recipient.&lt;/p&gt;
&lt;p&gt;To start, let&amp;rsquo;s add a new &amp;ldquo;Birthday&amp;rdquo; column to our spreadsheet.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Name  Email  Age   Birthday  Status
...   ...    ...   ...       ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;re going to use the moment.js library for working with dates. Create a new file (&lt;em&gt;File &amp;gt; New &amp;gt; Script File&lt;/em&gt;) in your Apps Script project. Call it moment.gs, or anything else, and paste in the contents of the moment.js library. You can copy and paste moment.js from 
&lt;a href=&#34;https://momentjs.com/downloads/moment.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Note: Be sure to use the non-minified version of moment.js; if you try using the minified version you will likely have trouble pasting the library into your Apps Script project.&lt;/p&gt;
&lt;p&gt;Now that we have moment.js, we can get the date of our friends birthday like this:
&lt;code&gt;moment(row[indexes[&amp;quot;Birthday&amp;quot;]])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can then write the function isTodaysDate like this. This will check that the month and day of the given date are today&amp;rsquo;s month and day, irrespective of what year the given date has.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isTodaysDate(date) {
  var now = moment();
  return now.isSame(date.year(now.year()), &amp;quot;day&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting it all together, we have this updated version of performMailMerge that will only send the email if the current date matches the birthday of the recipient.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isTodaysDate(date) {
  var now = moment();
  return now.isSame(date.year(now.year()), &amp;quot;day&amp;quot;);
}

function performMailMerge() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName(&amp;quot;Sheet 1&amp;quot;);
  var indexes = SpreadsheetDB.getColumnIndexesFromSheet(sheet);
  var subject = &amp;quot;Happiest Birthday!&amp;quot;;
  var draftMessage = getDraftMessageBySubject(subject);
  var templateBody = draftMessage.getPlainBody();
  SpreadsheetDB.forEachRow(sheet, function(row) {
    var name = row[indexes[&amp;quot;Name&amp;quot;]];
    var email = row[indexes[&amp;quot;Email&amp;quot;]];
    var age = row[indexes[&amp;quot;Age&amp;quot;]];
    var status = row[indexes[&amp;quot;Status&amp;quot;]];
    var birthday = moment(row[indexes[&amp;quot;Birthday&amp;quot;]]);
    
    if (status == &amp;quot;Done&amp;quot;) {
      return;
    }
    if (!isTodaysDate(birthday)) {
      return;
    }
    
    var body = templateBody.replace(/&amp;lt;name&amp;gt;/g, name).replace(/&amp;lt;age&amp;gt;/g, age);
    GmailApp.sendEmail(email, subject, body);
    
    row[indexes[&amp;quot;Status&amp;quot;]] = &amp;quot;Done&amp;quot;;
    return row;
  });
}

function getDraftMessageBySubject(subject) {
  var draftMessages = GmailApp.getDraftMessages();
  for (var i = 0; i &amp;lt; draftMessages.length; i++) {
    var draftMessage = draftMessages[i];
    if (draftMessage.getSubject() == subject) {
      return draftMessage;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the only step remaining is to make this performMailMerge function run every day. To do this, click the &amp;ldquo;Triggers&amp;rdquo; button in the toolbar (the clock icon). Create a new time-based trigger, and set it up so that it runs Daily (you get to choose when each day it will run). Configure it to run the performMailMerge each day at a time of your choice.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/587d3371fc52f0ae50434a52337dbdfc/tumblr_pgyxa5usTC1rfccnto1_1280.png&#34; alt=&#34;Apps Script menu bar: Set a trigger&#34; style=&#34;width:700px;&#34;&gt;
&lt;p&gt;&lt;em&gt;Viola!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You now have a mail merge that&amp;rsquo;s running daily automatically, sending your friends Happy Birthday messages on their birthdays. Aren&amp;rsquo;t you a good friend?&lt;/p&gt;
&lt;p&gt;While sending birthday emails automatically is somewhat impersonal, the techniques used here are broadly applicable. With Apps Script, you can send yourself reminders, monitor your Calendar events, track your finances, and more. It&amp;rsquo;s a super useful and super friendly set of APIs, and this automated birthday emailer just scratches the surface of what Apps Script makes possible.&lt;/p&gt;
&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ve now learned how to program a mail merge function that uses a spreadsheet as input. You can use a template to send multiple recipients personalized emails. You can schedule these emails to send in the future.&lt;/p&gt;
&lt;p&gt;You now have a great power, and with it comes great responsibility. Don&amp;rsquo;t use this for spam. Be kind and courteous to your fellow citizens of the internet. If you find this useful, do let me know what you use it for (I&amp;rsquo;m 
&lt;a href=&#34;https://twitter.com/Bieber&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Bieber&lt;/a&gt; on Twitter). I&amp;rsquo;m using Google Apps Script for a variety of things these days and I am always interested to hear how others are using the same tools.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
