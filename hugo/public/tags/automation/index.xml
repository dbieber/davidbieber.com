<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automation | David Bieber</title>
    <link>https://davidbieber.com/tags/automation/</link>
      <atom:link href="https://davidbieber.com/tags/automation/index.xml" rel="self" type="application/rss+xml" />
    <description>Automation</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 28 Oct 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>Automation</title>
      <link>https://davidbieber.com/tags/automation/</link>
    </image>
    
    <item>
      <title>The potential of Machine Learning and Automation for Note-taking</title>
      <link>https://davidbieber.com/snippets/2021-10-28-ml-and-automation-for-note-taking/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://davidbieber.com/snippets/2021-10-28-ml-and-automation-for-note-taking/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s consider machine learning first, and then automation. For each we brainstorm the potential value for note-taking.&lt;/p&gt;
&lt;h3 id=&#34;the-value-of-markmachine-learningmark-for-note-taking&#34;&gt;The Value of &lt;mark&gt;Machine Learning&lt;/mark&gt; for Note-Taking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Automatic &lt;strong&gt;transcription&lt;/strong&gt; of audio notes&lt;/li&gt;
&lt;li&gt;Automatic &lt;strong&gt;categorization&lt;/strong&gt; of notes&lt;/li&gt;
&lt;li&gt;Automatic &lt;strong&gt;categorization of spaced repetition&lt;/strong&gt; flash cards&lt;/li&gt;
&lt;li&gt;Automatic &lt;strong&gt;context-filling&lt;/strong&gt; of spaced repetition flash cards
&lt;ul&gt;
&lt;li&gt;e.g. highlight a phrase to create a flash card; the necessary context is pulled in from surrounding paragraphs to make a coherent standalone flash card.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automatic &lt;strong&gt;connections&lt;/strong&gt; and graph construction:
&lt;ul&gt;
&lt;li&gt;Textual elements:
&lt;ul&gt;
&lt;li&gt;Entity extraction from notes (&amp;ldquo;implicit nodes&amp;rdquo;, e.g. &amp;ldquo;Bank of America&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Attribute extraction from notes (e.g. &amp;ldquo;incredible presentation by Pierre-Antoine&amp;rdquo; gets tagged as incredible or wow (the canonical form).)&lt;/li&gt;
&lt;li&gt;Relationship extraction (e.g. &amp;ldquo;Diamond Age by Neal Stephenson&amp;rdquo; -&amp;gt; creates an &amp;ldquo;author of&amp;rdquo; relationship)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Background knowledge elements:
&lt;ul&gt;
&lt;li&gt;e.g. knowing that Diamond Age is a book&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Writing prompt generator / &lt;strong&gt;Writing assistant&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overlap detection&lt;/strong&gt; between people&amp;rsquo;s graphs
&lt;ul&gt;
&lt;li&gt;The Go Note Go &amp;ldquo;clink&amp;rdquo; scenario&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Autocomplete&lt;/strong&gt; (e.g. gmail tab completion)&lt;/li&gt;
&lt;li&gt;Improved &lt;strong&gt;spaced repetition algorithms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Mistake detection / &lt;strong&gt;fact checking&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summarization&lt;/strong&gt; of notes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Highlight extraction&lt;/strong&gt; from notes&lt;/li&gt;
&lt;li&gt;Suggesting &lt;strong&gt;new ideas&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Suggesting &lt;strong&gt;new online resources&lt;/strong&gt; to read / explore
&lt;ul&gt;
&lt;li&gt;Incl. articles, papers, YouTube videos, Suggesting &lt;strong&gt;people to reach out to&lt;/strong&gt; (e.g. because of their blog or Twitter or other things they&amp;rsquo;re written)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suggesting &lt;strong&gt;people to reach out to&lt;/strong&gt; (e.g. because of their blog or Twitter or other things they&amp;rsquo;re written&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic search&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversational chat bots&lt;/strong&gt; for exploring the knowledge in a notebase&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-value-of-markautomationmark-for-note-taking&#34;&gt;The Value of &lt;mark&gt;Automation&lt;/mark&gt; for Note-Taking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Share notes&lt;/strong&gt; with people via their preferred messaging platform&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snooze notes&lt;/strong&gt; and ideas so you review them later&lt;/li&gt;
&lt;li&gt;Set pomodoros, alarms, and reminders to &lt;strong&gt;stay focused&lt;/strong&gt; and &lt;strong&gt;stay on task&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Note-taking &lt;strong&gt;via highlights&lt;/strong&gt; (e.g. with Browserflow)&lt;/li&gt;
&lt;li&gt;Note-taking &lt;strong&gt;via screenshots&lt;/strong&gt; (e.g. from YouTube)&lt;/li&gt;
&lt;li&gt;Automatic creation of &lt;strong&gt;spaced repetition from highlights&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bulk refactors&lt;/strong&gt; of note-taking&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pulling in context&lt;/strong&gt; from other sources (e.g. Warmly pulls LinkedIn info into Calendar, notes could pull info from wikipedia)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sync notes&lt;/strong&gt; between other sources and your notebase
&lt;ul&gt;
&lt;li&gt;Other people&amp;rsquo;s notes&lt;/li&gt;
&lt;li&gt;Your email client, calendar, TODO app, spaced repetition app, GitHub issues, other messaging services, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publishing&lt;/strong&gt; of notes to a webpage (either publicly or privately), or to social media&lt;/li&gt;
&lt;li&gt;New &lt;strong&gt;data entry&lt;/strong&gt; mechanisms: &lt;strong&gt;Go Note Go&lt;/strong&gt;, terminal, email, text, browsing history, location history, terminal history, IoT devices, etc&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spaced repetition&lt;/strong&gt; for studying&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inactivity reminders&lt;/strong&gt; (e.g. &amp;ldquo;it&amp;rsquo;s been three months since you&amp;rsquo;ve done a music activity&amp;rdquo;, or &amp;ldquo;it&amp;rsquo;s been over 6 months since you&amp;rsquo;ve spoken with David Dohan&amp;rdquo;, or &amp;ldquo;it&amp;rsquo;s been over a year since you&amp;rsquo;ve written about microbiology.&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Writing a Mail Merge in Google Apps Script</title>
      <link>https://davidbieber.com/post/2018-10-21-apps-script-mail-merge/</link>
      <pubDate>Sun, 21 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://davidbieber.com/post/2018-10-21-apps-script-mail-merge/</guid>
      <description>&lt;p&gt;Google Apps Script is endlessly useful; in this post you will learn how to write a mail merge with Google Apps Script. It&amp;rsquo;s less than 30 lines of code! You can use this technique to send personalized emails individually to many recipients. In the second part of this post, you will learn how to schedule these emails to send in the future.&lt;/p&gt;
&lt;h2 id=&#34;part-1-writing-a-mail-merge&#34;&gt;Part 1: Writing a Mail Merge&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;mail merge&lt;/em&gt; is a program that sends an email to many recipients, automatically filling in the contents of the email according to a template. It&amp;rsquo;s like a form letter. Each recipient receives a personalized copy of the email.&lt;/p&gt;
&lt;p&gt;In this section we use Google Apps Script to create a mail merge that sends personalized &amp;ldquo;Happy Birthday&amp;rdquo; messages to a group of our friends. This will involve writing a template email, creating a spreadsheet, and writing a small amount of JavaScript code. With practice, you can perform tasks like this in well under an hour.&lt;/p&gt;
&lt;p&gt;First, we draft the email in Gmail. We&amp;rsquo;ll use angle brackets for the parts of the message we want to replace with data from our spreadsheet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;Subject:
  Happiest Birthday!

Body:
  Dear &amp;lt;name&amp;gt;,

  Happy birthday! I think you, &amp;lt;name&amp;gt;, personally are awesome.
  You may be getting older, but you&#39;re still the coolest person I know.
  What are you now, &amp;lt;age&amp;gt;? Wow.

  Party on!
  David
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we create a Google Spreadsheet (
&lt;a href=&#34;https://sheets.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sheets.google.com&lt;/a&gt;) with three columns like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;Name  Email  Age  
...   ...    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(To add yourself to my spreadsheet and actually receive a happy birthday email on your alleged birthday, just 
&lt;a href=&#34;https://goo.gl/forms/qEy8f5CQ8itVVFoe2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fill out this form&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Inside your spreadsheet, choose &lt;em&gt;Tools &amp;gt; Script Editor&lt;/em&gt;. This creates a new Apps Script associated with your spreadsheet.&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s time to write some JavaScript. We&amp;rsquo;re going to write a function to perform the mail merge.
We&amp;rsquo;ll call it &lt;code&gt;performMailMerge&lt;/code&gt; and it won&amp;rsquo;t have any parameters, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function performMailMerge() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will use the built in SpreadsheetApp library to access the spreadsheet, the SpreadsheetDB library to perform basic data lookup operations on the spreadsheet, and the built in GmailApp library to look up drafts and send emails.&lt;/p&gt;
&lt;p&gt;SpreadsheetDB is a small library (a collection of useful functions) that allows us to quickly process rows in a spreadsheet, referencing columns by their header names. Choose one of the two options below for using SpreadsheetDB.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To use the library SpreadsheetDB, choose Resources &amp;gt; Libraries &amp;gt; Add a library and enter &lt;code&gt;193p7IxBukPVkoxwMH8UDcdkYJiNCDWSylMA_htgliEPxjjqixhzKt_2g&lt;/code&gt;. This is the ID of the SpreadsheetDB library. Select the latest version from the version dropdown menu. It should say &amp;ldquo;SpreadsheetDB&amp;rdquo; if you&amp;rsquo;ve done it right. This will allow you to use functions from the SpreadsheetDB library in your project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use SpreadsheetDB from source, create a new file in your project and name it &lt;code&gt;spreadsheet.gs&lt;/code&gt; (the name is not important). Copy and paste in the source of SpreadsheetDB from the 
&lt;a href=&#34;https://gist.github.com/dbieber/471a3103adb727d6985892338de00aea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gist here&lt;/a&gt;. If you choose to copy and paste the source into your project, then you must omit the prefix &amp;ldquo;SpreadsheetDB.&amp;rdquo; from your calls to the SpreadsheetDB functions in the following code. E.g. &lt;code&gt;SpreadsheetDB.getColumnIndexesFromSheet&lt;/code&gt; would become just &lt;code&gt;getColumnIndexesFromSheet&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that you&amp;rsquo;re set up with SpreadsheetDB, I&amp;rsquo;ll start by showing you the full program, then I&amp;rsquo;ll explain what each line does.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function performMailMerge() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName(&amp;quot;Sheet 1&amp;quot;);
  var indexes = SpreadsheetDB.getColumnIndexesFromSheet(sheet);
  var subject = &amp;quot;Happiest Birthday!&amp;quot;;
  var draftMessage = getDraftMessageBySubject(subject);
  var templateBody = draftMessage.getPlainBody();
  SpreadsheetDB.forEachRow(sheet, function(row) {
    var name = row[indexes[&amp;quot;Name&amp;quot;]];
    var email = row[indexes[&amp;quot;Email&amp;quot;]];
    var age = row[indexes[&amp;quot;Age&amp;quot;]];
    
    var body = templateBody.replace(/&amp;lt;name&amp;gt;/g, name).replace(/&amp;lt;age&amp;gt;/g, age);
    GmailApp.sendEmail(email, subject, body);
  });
}

function getDraftMessageBySubject(subject) {
  var draftMessages = GmailApp.getDraftMessages();
  for (var i = 0; i &amp;lt; draftMessages.length; i++) {
    var draftMessage = draftMessages[i];
    if (draftMessage.getSubject() == subject) {
      return draftMessage;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The documentation for the built in libraries is very good. You can find the documentation for 
&lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpreadsheetApp&lt;/a&gt; here and for 
&lt;a href=&#34;https://developers.google.com/apps-script/reference/gmail/gmail-app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GmailApp&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;Let’s look at the pieces of this function individually:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
var sheet = spreadsheet.getSheetByName(&amp;quot;Sheet 1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives us a 
&lt;a href=&#34;https://developers.google.com/apps-script/reference/spreadsheet/sheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sheet&lt;/a&gt; object that we can use to access and edit the main sheet of our spreadsheet.&lt;/p&gt;
&lt;p&gt;The function call SpreadsheetDB.getColumnIndexesFromSheet(sheet) gives us back a mapping from column name to index. This is useful for accessing elements of a row by name later on. In our case, the result of getColumnIndexesFromSheet is the following mapping: &lt;code&gt;{Name: 0, Email: 1, Age: 2}&lt;/code&gt;. This means that Name is column index 0, Email is column index 1, and Age is column index 2. We’re counting columns starting with zero. Perfect!&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;getDraftMessageBySubject&lt;/code&gt; gets a draft from our Gmail drafts that we’ll use later to send the emails to our friends.&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;SpreadsheetDB.forEachRow&lt;/code&gt; function to perform an action for each row in the spreadsheet except the headers. We pass a function with no name (an &amp;ldquo;anonymous function&amp;rdquo;) to SpreadsheetDB, and SpreadsheetDB will call that function once per non-header row of our spreadsheet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    var name = row[indexes[&amp;quot;Name&amp;quot;]];
    var email = row[indexes[&amp;quot;Email&amp;quot;]];
    var age = row[indexes[&amp;quot;Age&amp;quot;]];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The input to our anonymous function, row, is an array with the contents of the row currently being processed. From earlier, indexes[&amp;ldquo;Name&amp;rdquo;] is 0, indexes[&amp;ldquo;Email&amp;rdquo;] is 1, and indexes[&amp;ldquo;Age&amp;rdquo;] is 2. We can use this to get the name, email, and age of one of our friends from the spreadsheet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var body = templateBody.replace(/&amp;lt;name&amp;gt;/g, name).replace(/&amp;lt;age&amp;gt;/g, age);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where the textual replacement actually happens. &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is replaced with your friend&amp;rsquo;s name. &lt;code&gt;&amp;lt;age&amp;gt;&lt;/code&gt; is replaced with your friend&amp;rsquo;s age. The &amp;lsquo;g&amp;rsquo; indicates that a &amp;ldquo;global&amp;rdquo; replacement should be performed, so every time the string &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; appears it will be replaced by the name of your friend from the spreadsheet. Without the &amp;lsquo;g&amp;rsquo;, only the first occurence of &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; would be replaced.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;GmailApp.sendMail(email, subject, body);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last, this line sends the email!&lt;/p&gt;
&lt;p&gt;Since this is JavaScript, you can comment out lines by putting &lt;code&gt;//&lt;/code&gt; at the start of the line. Everything occuring after &lt;code&gt;//&lt;/code&gt; on the line will have no affect.&lt;/p&gt;
&lt;p&gt;I recommend commenting out the GmailApp.sendMail line before running this for the first time to so that you don&amp;rsquo;t accidently email people incorrectly.&lt;/p&gt;
&lt;p&gt;Add the line &lt;code&gt;Logger.log(&amp;quot;To: &amp;quot; + email); Logger.log(&amp;quot;Subj: &amp;quot; + subject); Logger.log(&amp;quot;Body: &amp;quot; + body);&lt;/code&gt; in place of the GmailApp.sendMail line until you&amp;rsquo;re convinced that the correct emails are going to be sent to the correct people. Only once you are sure it&amp;rsquo;s working as intended, uncomment the GmailApp.sendMail line so it actually sends the emails.&lt;/p&gt;
&lt;p&gt;To run the performMailMerge function, choose performMailMerge from the dropdown and click the run (right-arrow) button.
To see your logs (the inputs to the Logger.log function calls), choose &amp;ldquo;View &amp;gt; Logs&amp;rdquo; or press ctrl-Enter or cmd-Enter.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/da2acd06f66fb2c9b6f6e68f046029de/tumblr_pgyx7hQlOL1rfccnto1_1280.png&#34; alt=&#34;Apps Script menu bar: Run button&#34; style=&#34;width:700px;&#34;&gt;
&lt;p&gt;That&amp;rsquo;s it. When you run performMailMerge, the emails will be sent with the values from the spreadsheet substituted for the &amp;ldquo;&lt;name&gt;&amp;rdquo; and &amp;ldquo;&lt;age&gt;&amp;rdquo; placeholders in the draft. Once you&amp;rsquo;ve got the hang of this, let&amp;rsquo;s add a few finishing touches before moving on to scheduling emails to be sent in the future.&lt;/p&gt;
&lt;h3 id=&#34;finishing-touches&#34;&gt;Finishing Touches&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Finishing touch 1:&lt;/em&gt; Adding a &amp;ldquo;Status&amp;rdquo; column to avoid emailing people twice.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;Name  Email  Age  Status
...   ...    ...  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s add some finishing touches. Add to your spreadsheet a new column &amp;ldquo;Status&amp;rdquo;. When an email sends successfully, we&amp;rsquo;ll set the status of the row to &amp;ldquo;Done&amp;rdquo;. If the status of a row is already &amp;ldquo;Done&amp;rdquo;, we&amp;rsquo;ll skip that row. The updated code is shown here:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function performMailMerge() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName(&amp;quot;Sheet 1&amp;quot;);
  var indexes = SpreadsheetDB.getColumnIndexesFromSheet(sheet);
  var subject = &amp;quot;Happiest Birthday!&amp;quot;;
  var draftMessage = getDraftMessageBySubject(subject);
  var templateBody = draftMessage.getPlainBody();
  SpreadsheetDB.forEachRow(sheet, function(row) {
    var name = row[indexes[&amp;quot;Name&amp;quot;]];
    var email = row[indexes[&amp;quot;Email&amp;quot;]];
    var age = row[indexes[&amp;quot;Age&amp;quot;]];
    var status = row[indexes[&amp;quot;Status&amp;quot;]];
    
    if (status == &amp;quot;Done&amp;quot;) {
      return;
    }
    
    var body = templateBody.replace(/&amp;lt;name&amp;gt;/g, name).replace(/&amp;lt;age&amp;gt;/g, age);
    GmailApp.sendEmail(email, subject, body);
    
    row[indexes[&amp;quot;Status&amp;quot;]] = &amp;quot;Done&amp;quot;;
    return row;
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to make this change, we just check the value of &lt;code&gt;row[indexes[&amp;quot;Status&amp;quot;]]&lt;/code&gt;, and use a return statement to skip the row if the status is &amp;ldquo;Done&amp;rdquo;.
In order to update the row, we modify the &lt;code&gt;row&lt;/code&gt; array and return it and SpreadsheetDB takes care of updating the underlying spreadsheet.&lt;/p&gt;
&lt;p&gt;With this change in place, we can now add new recipients to our spreadsheet even after having run the performMailMerge function, and if we run performMailMerge again we won&amp;rsquo;t email anyone who has already received an email.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Finishing touch 2:&lt;/em&gt; Adding a menu item that triggers our function.&lt;/p&gt;
&lt;p&gt;When we created our Apps Script, it was automatically associated with our spreadsheet. If we add a function named &lt;code&gt;onOpen()&lt;/code&gt; to our Apps Script, it will automatically get run when the associated spreadsheet is opened. We can add a menu item to our spreadsheet by writing an onOpen function like this one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function onOpen() {
  SpreadsheetApp.getUi()
  .createMenu(&#39;Mail Merge&#39;)
  .addItem(&#39;Send Emails&#39;, &#39;performMailMerge&#39;)
  .addToUi();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go ahead and refresh your spreadsheet. You should now see a menu called &amp;ldquo;Mail Merge&amp;rdquo; with a menu item &amp;ldquo;Send Emails&amp;rdquo;. Selecting &amp;ldquo;Send Emails&amp;rdquo; will cause your performMailMerge function to be run.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/bba93c6c694c1ed6196e86baa1307648/tumblr_pgyxyq8CVX1rfccnto1_1280.png&#34; alt=&#34;Mail merge custom menu bar&#34; style=&#34;width:700px;&#34;&gt;
&lt;h2 id=&#34;part-2-scheduling-emails-for-the-future&#34;&gt;Part 2: Scheduling Emails for the Future&lt;/h2&gt;
&lt;p&gt;In Part 1 we wrote a mail merge function that emails our friends &amp;ldquo;personalized&amp;rdquo; Happy Birthday messages when we run performMailMerge. But why would we want to say happy birthday to all our friends at once? That&amp;rsquo;s silly, it makes much more sense to send them a happy birthday message &lt;em&gt;on their birthday&lt;/em&gt;. In this section, we&amp;rsquo;ll modify our mail merge to send emails only on the birthday of the recipient.&lt;/p&gt;
&lt;p&gt;To start, let&amp;rsquo;s add a new &amp;ldquo;Birthday&amp;rdquo; column to our spreadsheet.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;Name  Email  Age   Birthday  Status
...   ...    ...   ...       ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;re going to use the moment.js library for working with dates. Create a new file (&lt;em&gt;File &amp;gt; New &amp;gt; Script File&lt;/em&gt;) in your Apps Script project. Call it moment.gs, or anything else, and paste in the contents of the moment.js library. You can copy and paste moment.js from 
&lt;a href=&#34;https://momentjs.com/downloads/moment.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. Note: Be sure to use the non-minified version of moment.js; if you try using the minified version you will likely have trouble pasting the library into your Apps Script project.&lt;/p&gt;
&lt;p&gt;Now that we have moment.js, we can get the date of our friends birthday like this:
&lt;code&gt;moment(row[indexes[&amp;quot;Birthday&amp;quot;]])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can then write the function isTodaysDate like this. This will check that the month and day of the given date are today&amp;rsquo;s month and day, irrespective of what year the given date has.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isTodaysDate(date) {
  var now = moment();
  return now.isSame(date.year(now.year()), &amp;quot;day&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting it all together, we have this updated version of performMailMerge that will only send the email if the current date matches the birthday of the recipient.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isTodaysDate(date) {
  var now = moment();
  return now.isSame(date.year(now.year()), &amp;quot;day&amp;quot;);
}

function performMailMerge() {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName(&amp;quot;Sheet 1&amp;quot;);
  var indexes = SpreadsheetDB.getColumnIndexesFromSheet(sheet);
  var subject = &amp;quot;Happiest Birthday!&amp;quot;;
  var draftMessage = getDraftMessageBySubject(subject);
  var templateBody = draftMessage.getPlainBody();
  SpreadsheetDB.forEachRow(sheet, function(row) {
    var name = row[indexes[&amp;quot;Name&amp;quot;]];
    var email = row[indexes[&amp;quot;Email&amp;quot;]];
    var age = row[indexes[&amp;quot;Age&amp;quot;]];
    var status = row[indexes[&amp;quot;Status&amp;quot;]];
    var birthday = moment(row[indexes[&amp;quot;Birthday&amp;quot;]]);
    
    if (status == &amp;quot;Done&amp;quot;) {
      return;
    }
    if (!isTodaysDate(birthday)) {
      return;
    }
    
    var body = templateBody.replace(/&amp;lt;name&amp;gt;/g, name).replace(/&amp;lt;age&amp;gt;/g, age);
    GmailApp.sendEmail(email, subject, body);
    
    row[indexes[&amp;quot;Status&amp;quot;]] = &amp;quot;Done&amp;quot;;
    return row;
  });
}

function getDraftMessageBySubject(subject) {
  var draftMessages = GmailApp.getDraftMessages();
  for (var i = 0; i &amp;lt; draftMessages.length; i++) {
    var draftMessage = draftMessages[i];
    if (draftMessage.getSubject() == subject) {
      return draftMessage;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the only step remaining is to make this performMailMerge function run every day. To do this, click the &amp;ldquo;Triggers&amp;rdquo; button in the toolbar (the clock icon). Create a new time-based trigger, and set it up so that it runs Daily (you get to choose when each day it will run). Configure it to run the performMailMerge each day at a time of your choice.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/587d3371fc52f0ae50434a52337dbdfc/tumblr_pgyxa5usTC1rfccnto1_1280.png&#34; alt=&#34;Apps Script menu bar: Set a trigger&#34; style=&#34;width:700px;&#34;&gt;
&lt;p&gt;&lt;em&gt;Viola!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You now have a mail merge that&amp;rsquo;s running daily automatically, sending your friends Happy Birthday messages on their birthdays. Aren&amp;rsquo;t you a good friend?&lt;/p&gt;
&lt;p&gt;While sending birthday emails automatically is somewhat impersonal, the techniques used here are broadly applicable. With Apps Script, you can send yourself reminders, monitor your Calendar events, track your finances, and more. It&amp;rsquo;s a super useful and super friendly set of APIs, and this automated birthday emailer just scratches the surface of what Apps Script makes possible.&lt;/p&gt;
&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ve now learned how to program a mail merge function that uses a spreadsheet as input. You can use a template to send multiple recipients personalized emails. You can schedule these emails to send in the future.&lt;/p&gt;
&lt;p&gt;You now have a great power, and with it comes great responsibility. Don&amp;rsquo;t use this for spam. Be kind and courteous to your fellow citizens of the internet. If you find this useful, do let me know what you use it for (I&amp;rsquo;m 
&lt;a href=&#34;https://twitter.com/Bieber&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@Bieber&lt;/a&gt; on Twitter). I&amp;rsquo;m using Google Apps Script for a variety of things these days and I am always interested to hear how others are using the same tools.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running Firefox in the Cloud</title>
      <link>https://davidbieber.com/post/2014-11-08-firefox-in-the-cloud/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      <guid>https://davidbieber.com/post/2014-11-08-firefox-in-the-cloud/</guid>
      <description>&lt;p&gt;I found running Firefox in the cloud difficult, but with enough digging around I was able to get it working. Now I&amp;rsquo;m able to drive a headless version of Firefox with Selenium using Python. This lets me do things like have my 
&lt;a href=&#34;https://github.com/dbieber/ScrabbleBot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Scrabble Bot&lt;/a&gt; play Words with Friends autonomously on Facebook.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What am I going to show you how to do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to explain how you can install Firefox and Selenium on a virtual machine in the cloud. I&amp;rsquo;m going to show this using a Debian instance on 
&lt;a href=&#34;https://cloud.google.com/compute/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Compute Engine&lt;/a&gt;, but you could also do this using a virtual machine from Amazon EC2.&lt;/p&gt;
&lt;p&gt;Before continuing you should create a virtual machine running Debian on Google Compute Engine (GCE). 
&lt;a href=&#34;https://cloud.google.com/compute/docs/quickstart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;You can learn how to spin up a VM here&lt;/a&gt;. Make sure that you can SSH into your machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing Firefox&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re actually going to install Iceweasel. To the best of my knowledge, the only difference between Iceweasel and Firefox is the branding. To do this, we&amp;rsquo;re going to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update the sources list that apt-get uses to find packages.
Edit the file &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; and add the line &lt;code&gt;deb http://mozilla.debian.net/ wheezy-backports iceweasel-release&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Update apt-get by running the command &lt;code&gt;sudo apt-get update&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install Iceweasel by running the command &lt;code&gt;sudo apt-get install -t wheezy-backports iceweasel&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I figured this out by searching for &amp;ldquo;iceweasel sources list&amp;rdquo;, which brought me to 
&lt;a href=&#34;http://mozilla.debian.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://mozilla.debian.net/&lt;/a&gt;. If you&amp;rsquo;re looking to install a different version of Iceweasel/Firefox or have a different version of Debian, check there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Running Firefox&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can now run the browser we installed with the command &lt;code&gt;firefox&lt;/code&gt; or &lt;code&gt;iceweasel&lt;/code&gt;, but it will shut down because there is no display. To run the browser without a display (that is, to run it &amp;ldquo;headlessly&amp;rdquo;), we&amp;rsquo;re going to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the display server Xvfb (X virtual framebuffer) with the command &lt;code&gt;sudo apt-get install xvfb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Start the display server with the command &lt;code&gt;sudo Xvfb :10&lt;/code&gt;. Here, :10 is the server number we chose for the virtual display we&amp;rsquo;re creating.&lt;/li&gt;
&lt;li&gt;Now run &lt;code&gt;export DISPLAY=:10&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should now be able to run &lt;code&gt;firefox&lt;/code&gt; or &lt;code&gt;iceweasel&lt;/code&gt; successfully.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to see what&amp;rsquo;s on your virtual display, 
&lt;a href=&#34;http://en.wikipedia.org/wiki/Xvfb#Usage_examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia provides an example of how to take a screenshot of your virtual display&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installing Selenium&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can now run a headless version of Firefox. Since there&amp;rsquo;s no user interface to click around in, the next logical step is to learn how to drive the browser. For this, we&amp;rsquo;re going to set up Selenium in Python. When dealing with packages in Python, I recommend using pip inside a virtualenv with virtualenvwrapper. There are instructions for setting up these packages below.&lt;/p&gt;
&lt;p&gt;Once you have virtualenvwrapper installed and you&amp;rsquo;re safely working in a virtual environment, just issue the command &lt;code&gt;pip install selenium&lt;/code&gt; to install selenium. If you&amp;rsquo;re not in a virtualenv, you may need to issue the command with sudo.&lt;/p&gt;
&lt;p&gt;Try running this Python script to see if it&amp;rsquo;s all working. It should take you to Google Images, search for cute kittens, and then save a screenshot to the file &amp;lsquo;adorable.png&amp;rsquo;.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/dbieber/1c4a7bdca8f9820b3612.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;Installing virtualenvwrapper&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As promised above, here is a section about virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Managing Python packages effectively is difficult, and I can&amp;rsquo;t do the topic justice here. I recommend using virtualenvwrapper to help, and 
&lt;a href=&#34;http://virtualenvwrapper.readthedocs.org/en/latest/install.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;you can read more about how to do this here&lt;/a&gt;. For completeness, I&amp;rsquo;ll briefly run through the steps of getting set up with pip, virtualenv, and virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; is Python&amp;rsquo;s package manager. Once you have pip set up, you can run &lt;code&gt;pip install package-name&lt;/code&gt; to install the package called package-name.&lt;/p&gt;
&lt;p&gt;To set up pip, run the following commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;curl https://bootstrap.pypa.io/get-pip.py &amp;gt; get-pip.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo python get-pip.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; is a tool that let&amp;rsquo;s you have different versions of Python and Python packages for different projects that you work on. Combined with &lt;code&gt;virtualenvwrapper&lt;/code&gt;, it will help you avoid headaches of keeping track of where your various Python versions live and where they can find their packages on your machine.&lt;/p&gt;
&lt;p&gt;To install virtualenv, run the command &lt;code&gt;sudo pip install virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To install virtualenvwrapper, run the command &lt;code&gt;sudo pip install virtualenvwrapper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add the following three lines to your .bashrc or another startup script:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export WORKON_HOME=$HOME/.virtualenvs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export PROJECT_HOME=$HOME/Devel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source /usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re now ready to go. 
&lt;a href=&#34;http://virtualenvwrapper.readthedocs.org/en/latest/command_ref.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learn more about how to use virtualenvwrapper effectively here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Last thoughts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope you find this helpful. You can now install Firefox on Google Compute Engine, run it using a virtual display, and drive it using Selenium with Python. If something isn&amp;rsquo;t working, or if something is working really well and has you super excited, I&amp;rsquo;m happy to talk it through with you. Email&amp;rsquo;s the best way to contact me. Go forth and automate your life!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automate Your Life: Sending Emails</title>
      <link>https://davidbieber.com/post/2013-03-13-automate-your-life-sending-emails/</link>
      <pubDate>Wed, 13 Mar 2013 00:00:00 +0000</pubDate>
      <guid>https://davidbieber.com/post/2013-03-13-automate-your-life-sending-emails/</guid>
      <description>&lt;p&gt;&lt;em&gt;In a hurry? Scroll down and skip to the code. That&amp;rsquo;s the good part anyway.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of the beauties of programming is the elimination of redundant aspects of life that you find yourself doing over and over again. When you find yourself calling home every weekend, logging hours at your job daily, or getting your hair cut every month, it&amp;rsquo;s time to learn to program. Write a short script to do these repetitive behaviors for you. Just kidding. Don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;These are joke examples &amp;ndash; I strongly advise against automating discussions with your mother &amp;ndash; but they aren&amp;rsquo;t so farfetched. Automating processes - shopping, shipping, server maintenance - save countless hours and dollars. Here, we&amp;rsquo;ll do a thought experiment: imagine a team of people running Amazon.com without automation. As a crude estimate, let&amp;rsquo;s suppose they sell a mere billion books each year. Let&amp;rsquo;s imagine they only handle 1% of all Internet traffic. And let&amp;rsquo;s pretend they only store 1 trillion objects in their S3 storage system. Then with their team of about ninety thousand, each Amazon employee would have to be selling and shipping 30 books a day on top of processing and transmitting over 100 gigabytes of Internet traffic daily, all while handling requests for a hundred thousand S3 objects that they&amp;rsquo;ve had to memorize. Maybe &lt;a href=&#34;http://en.wikipedia.org/wiki/Jeff_Bezos&#34;&gt;Jeff Bezos&lt;/a&gt; could pull it off. But you&amp;rsquo;re not Jeff Bezos, so I&amp;rsquo;d say it&amp;rsquo;s worth your time to learn to automate.&lt;/p&gt;
&lt;p&gt;Even education is being automated these days. Will the next century&amp;rsquo;s robotic overloads prove to be better professors than the ones we grew up with? To which you may reply: &amp;ldquo;Oh gee whiz! I sure hope we get better robotic overloads in the future! The ones I grew up with were just miserable professors.&amp;rdquo; But that&amp;rsquo;s not what I meant. I&amp;rsquo;m asking whether &lt;a href=&#34;http://khanacademy.org/&#34;&gt;Khan Academies&lt;/a&gt; and &lt;a href=&#34;http://duolingo.com/&#34;&gt;Duolingos&lt;/a&gt; will replace our real life Ms. Frizzles and Mrs. Gorfs. A brief excursion with Duolingo makes me suspect it will be a major part of all future language educations. This seems counterintuitive. Languages are inherently about communication. The best way to learn a language should necessarily involve communicating (and the very best way will probably forever remain immersion, but often that&amp;rsquo;s not an option). Conversation and human interaction are so fundamental to language learning that it seems almost absurd that a computer could be a good language teacher, at least until we have &lt;a href=&#34;http://en.wikipedia.org/wiki/Strong_AI&#34;&gt;strong AI&lt;/a&gt;. But the computer manages to do one thing extraordinarily well that isn&amp;rsquo;t scalable in a traditional classroom; the computer focuses entirely on me. So, yes, it lacks creativity and the personal touch of a great teacher. It doesn&amp;rsquo;t tell funny stories or crack foreign language jokes. It doesn&amp;rsquo;t show cute movies and it can&amp;rsquo;t relate to me at all. Yet despite all these shortcomings, it&amp;rsquo;s remarkably good at helping me learn the basics of a foreign language, because it can focus on me, going at my pace and not having to devote its efforts to maintaining the attention of 30 other students.&lt;/p&gt;
&lt;p&gt;Automation has clearly been taking over everywhere for years. You have to join it. &lt;a href=&#34;http://www.youtube.com/watch?v=nKIu9yen5nc&#34;&gt;It&amp;rsquo;s a real life superpower.&lt;/a&gt;  So let&amp;rsquo;s learn to automate something basic. We&amp;rsquo;ll go with software: a Python script to send emails.&lt;/p&gt;
&lt;p&gt;I present: the code. You can run it as is. Save it as a file and run it with Python, and it should just work out of the box. Go ahead, try it.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/dbieber/5146518.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Awesome. You just sent me an email. What good is this code? Tweak it a bit and you can use it for personal alerts &amp;ndash; systematically check when you&amp;rsquo;re low on milk and email yourself a reminder &amp;ndash; have your computer email you daily with upcoming birthdays; you can even have it buy the gifts. You can email yourself automatically when a course opens up on your registrar&amp;rsquo;s website. We&amp;rsquo;ll talk about auto-enrolling another time. Or you can set up a script to send different versions of emails to different people, like those spam emails that pretend to be personal by including your first name.&lt;/p&gt;
&lt;p&gt;With great power comes great responsibility. Don&amp;rsquo;t send spam.&lt;/p&gt;
&lt;p&gt;With a new Python library in your toolbox, I hope you save yourself thousands of hours. Until next time, try to stay &lt;a href=&#34;http://en.wikipedia.org/wiki/Don&#39;t_repeat_yourself&#34;&gt;dry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=5371430&#34;&gt;Discuss on Hacker News.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
