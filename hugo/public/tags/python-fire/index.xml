<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python Fire on David Bieber</title>
    <link>https://davidbieber.com/tags/python-fire/</link>
    <description>Recent content in Python Fire on David Bieber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://davidbieber.com/tags/python-fire/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Python Fire shebang</title>
      <link>https://davidbieber.com/snippets/2021-02-14-the-python-fire-shebang/</link>
      <pubDate>Sun, 14 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-02-14-the-python-fire-shebang/</guid>
      
      <description>&lt;p&gt;Happy valentine&amp;rsquo;s day! Today&amp;rsquo;s snippet is about a feature of 
&lt;a href=&#34;https://github.com/google/python-fire&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Fire&lt;/a&gt;, new in v0.4.0, and how you can use it to create Python Fire executables just by adding a shebang to an existing Python file. This idea is courtesy of 
&lt;a href=&#34;https://github.com/c6401&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;c6401&lt;/a&gt; in GitHub issue 
&lt;a href=&#34;https://github.com/google/python-fire/issues/319&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#319&lt;/a&gt;. The shebang line is &lt;code&gt;#!/usr/bin/env -S python3 -m fire&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The feature introduced in fire v0.4.0 is that &lt;code&gt;python -m fire&lt;/code&gt; now accepts filepaths.&lt;/p&gt;
&lt;p&gt;Suppose you have a Python file at &lt;code&gt;path/to/module.py&lt;/code&gt;. Previously, you could invoke module.py as a Fire CLI with the command &lt;code&gt;python -m fire path.to.module&lt;/code&gt;. That still works, but now you can also use the command &lt;code&gt;python -m fire path/to/module.py&lt;/code&gt;. This is roughly equivalent to running module.py and then calling &lt;code&gt;fire.Fire()&lt;/code&gt; as the final line of the module.&lt;/p&gt;
&lt;p&gt;A consequence of this new feature is that the shebang &lt;code&gt;#!/usr/bin/env -S python3 -m fire&lt;/code&gt; allows you to create executable CLIs out of Python files. &lt;code&gt;/usr/bin/env -S&lt;/code&gt; is explained 
&lt;a href=&#34;https://www.gnu.org/software/coreutils/manual/html_node/env-invocation.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. To create a Python Fire executable, simply add the shebang line as the first line of the file, and then use &lt;code&gt;chmod +x&lt;/code&gt; to mark the file as executable.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a quick example:&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/dbieber/ab8ed63ebbd7afad3c1f19c70028ae31.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Save it as e.g. &lt;code&gt;shebang.py&lt;/code&gt;, run &lt;code&gt;chmod +x shebang.py&lt;/code&gt; to make it executable, and run it with &lt;code&gt;./shebang.py hello --name=David&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; ./shebang.py hello --name=David
Hello David!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Questions to Answer About Python Fire</title>
      <link>https://davidbieber.com/snippets/2020-10-22-questions-to-answer-about-python-fire/</link>
      <pubDate>Thu, 22 Oct 2020 20:31:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2020-10-22-questions-to-answer-about-python-fire/</guid>
      
      <description>&lt;p&gt;Tomorrow I&amp;rsquo;m giving a talk to Women Who Code on Python Fire. Python Fire is a Python library I wrote back in 2017 that makes command line interfaces automatically out of any Python object you give it.&lt;/p&gt;
&lt;p&gt;I have my talk planned but there are a few pieces of the story I haven&amp;rsquo;t included in my talk yet. They are 1) Why did I build Python Fire? 2) How are people using Python Fire in the real world? 3) What&amp;rsquo;s it like maintaining an open source project?&lt;/p&gt;
&lt;p&gt;To the first question, I should explain how we used Boom at Nest. Boom was the proto-version of Fire that inspired Fire&amp;rsquo;s development. At Nest we had an ETL pipeline consisting of several distributed systems. For example data would pass through SQS, Kafka, Storm, and Pentaho while it was being ingested. We wanted to write tests for this complex series of systems. And we also wanted to be able to manually operate the systems. So we wrote Python functions for controlling each part of the system.&lt;/p&gt;
&lt;p&gt;Using Python&amp;rsquo;s inspect feature we then turned this collection of functions automatically into a CLI. This allowed us to reuse the same code both for writing tests and for giving the operators control over the ingestion pipelines without needing to do duplicate work. This was the inspiration for Fire.&lt;/p&gt;
&lt;p&gt;To question two: there are thousands of uses of Fire on GitHub. OkCupid uses it for data analysis. One person I corresponded with uses Fire to control after market engines. About 10% of uses on GitHub are for machine learning projects, including the GPT codebase. There are also a couple hundred uses within Google too, though gflags (aka abseil) is the Google standard for CLIs still.&lt;/p&gt;
&lt;p&gt;And finally to question three, it&amp;rsquo;s really nice to be appreciated! I built Fire to scratch my own itch from working at Nest and Google, but after releasing Fire it&amp;rsquo;s gotten quite popular. Over 17k stars on GitHub, thousands of open source projects using it, and over ten million installs from every country around the world. It&amp;rsquo;s really nice to see my effort appreciated.&lt;/p&gt;
&lt;p&gt;My favorite is that someone has written a blog post explaining why Fire is a good tool for teaching Python, because it lets the beginner start programming without needing to understand any boilerplate. I&amp;rsquo;m hopeful that Fire is indeed helping people learn to program.&lt;/p&gt;
&lt;p&gt;Time permitting I will add these questions and answers to my talk tomorrow.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jump-Cut Programming: Take 1</title>
      <link>https://davidbieber.com/snippets/2020-02-21-jump-cut-programming/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2020-02-21-jump-cut-programming/</guid>
      
        <message>Inspired by @realCarykh, I jump-cut into the world of automatic video editing.</message>
      
      <description>&lt;p&gt;I&amp;rsquo;ve been toying around with recording myself programming. Here&amp;rsquo;s a clip.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/OxsuHWVtMSM&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;In this clip I use 
&lt;a href=&#34;https://davidbieber.com/projects/python-fire&#34;&gt;Python Fire&lt;/a&gt; to create a simple two-function calculator. Nothing special about that.&lt;/p&gt;
&lt;p&gt;What is special is that the programming has automatically been sped up by 
&lt;a href=&#34;https://github.com/carykh/jumpcutter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;carykh/jumpcutter&lt;/a&gt;, and that I&amp;rsquo;ve used 
&lt;a href=&#34;https://zulko.github.io/moviepy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;moviepy&lt;/a&gt; to set the programming to the music 
&lt;a href=&#34;http://incompetech.com/music/royalty-free/index.html?isrc=USUAN1100414&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Dangerous&amp;rdquo;&lt;/a&gt;, a clip I got from 
&lt;a href=&#34;https://www.youtube.com/audiolibrary/music&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube&amp;rsquo;s free Audio Library&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;lessons-learned-from-take-1&#34;&gt;Lessons Learned from &amp;ldquo;Take 1&amp;rdquo;&lt;/h2&gt;
&lt;h3 id=&#34;what-worked-well&#34;&gt;What worked well?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;External Monitor&lt;/strong&gt;: I purchased an external monitor. This made a huge difference. Now I can manage video-editing tools, a terminal, a browser, etc on one screen, while keeping the contents of the video (the editor and public terminal) on the other screen and recording it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;
&lt;a href=&#34;https://github.com/carykh/jumpcutter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;carykh/jumpcutter&lt;/a&gt;&lt;/strong&gt;: This tool can automatically speed up the silent parts of a video, resulting in shorter less-boring videos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mac Screen Capture&lt;/strong&gt;: cmd-shift-5 lets you capture video on Mac. You can choose what directory the captured video is saved to. Before I discovered this, I used QuickTime, but this is easier to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using 
&lt;a href=&#34;https://pythonhosted.org/watchdog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;watchdog&lt;/a&gt;&lt;/strong&gt; This is a Python module that can monitor your filesystem and trigger an action when files are created or modified. I use it to a) automatically rename video files as they&amp;rsquo;re created, and b) to automatically apply jumpcutting to new captured videos. The filename format I use is &lt;code&gt;YYYY-MM-DD-screen-recording-###.mov&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Python Fire&lt;/strong&gt;: The first twenty clips I recorded (not released) were all of me building the tooling I now use as I record videos. Most of this tooling lives in Python Fire CLIs. These CLIs let me do things like composite audio, perform auto-jumpcutting, and rename videos.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;things-to-improve&#34;&gt;Things to improve:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Zoom in!&lt;/strong&gt; The code is blurry and small and the video as is needs to be watched at 1080p to look OK, which is silly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Audio Quality&lt;/strong&gt; I have a lapel mic I&amp;rsquo;m using for new recordings and it helps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storytelling&lt;/strong&gt; Is a Python Fire CLI for adding and subtracting the most compelling story? I think there&amp;rsquo;s room for improvement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Manual Editing&lt;/strong&gt; I did no manual editing for the clip above. I think for quality videos, however, learning to do some manual editing is going to be essential. We&amp;rsquo;ll see how far my inclination to automate everything takes me first though.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;I&amp;rsquo;m really enjoying this process of recording videos. And more than making the videos, I&amp;rsquo;m enjoying building the software to help me make the videos. Next step for me is getting more familiar with moviepy. And Davinci Resolve. But one thing at a time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Python Fire</title>
      <link>https://davidbieber.com/post/2017-03-06-introducing-python-fire/</link>
      <pubDate>Mon, 06 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/post/2017-03-06-introducing-python-fire/</guid>
      
      <description>&lt;p&gt;&lt;em&gt;Originally posted on the Google Open Source Blog&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Today we are pleased to announce the open-sourcing of 
&lt;a href=&#34;https://github.com/google/python-fire&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Fire&lt;/a&gt;. Python Fire generates command line interfaces (CLIs) from any Python code. Simply call the Fire function in any Python program to automatically turn that program into a CLI. The library is available from 
&lt;a href=&#34;https://pypi.org/project/fire/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pypi&lt;/a&gt; via &lt;code&gt;pip install fire&lt;/code&gt;, and the source is 
&lt;a href=&#34;https://github.com/google/python-fire&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python Fire will automatically turn your code into a CLI without you needing to do any additional work. You don’t have to define arguments, set up help information, or write a main function that defines how your code is run. Instead, you simply call the &lt;code&gt;Fire&lt;/code&gt; function from your main module, and Python Fire takes care of the rest. It uses inspection to turn whatever Python object you give it – whether it’s a class, an object, a dictionary, a function, or even a whole module – into a command line interface, complete with tab completion and documentation, and the CLI will stay up-to-date even as the code changes.&lt;/p&gt;
&lt;p&gt;To illustrate this, let’s look at a simple example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python
import fire

class Example(object):
  def hello(self, name=&#39;world&#39;):
    &amp;quot;&amp;quot;&amp;quot;Says hello to the specified name.&amp;quot;&amp;quot;&amp;quot;
    return &#39;Hello {name}!&#39;.format(name=name)

def main():
  fire.Fire(Example)

if __name__ == &#39;__main__&#39;:
  main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the Fire function is run, our command will be executed. Just by calling Fire, we can now use the Example class as if it were a command line utility.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./example.py hello
Hello world!
$ ./example.py hello David
Hello David!
$ ./example.py hello --name=Google
Hello Google!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, you can continue to use this module like an ordinary Python library, enabling you to use the exact same code both from Bash and Python. If you’re writing a Python library, then you no longer need to update your main method or client when experimenting with it; instead you can simply run the piece of your library that you’re experimenting with from the command line. Even as the library changes, the command line tool stays up to date.&lt;/p&gt;
&lt;p&gt;At Google, engineers use Python Fire to generate command line tools from Python libraries. We have an image manipulation tool built by using Fire with the 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Python_Imaging_Library&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Imaging Library&lt;/a&gt;, PIL. In 
&lt;a href=&#34;https://ai.google/research/teams/brain&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Brain&lt;/a&gt;, we use an experiment management tool built with Fire, allowing us to manage experiments equally well from Python or from Bash.&lt;/p&gt;
&lt;p&gt;Every Fire CLI comes with an interactive mode. Run the CLI with the &lt;code&gt;--interactive&lt;/code&gt; flag to launch an 
&lt;a href=&#34;https://ipython.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IPython&lt;/a&gt; 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;REPL&lt;/a&gt; with the result of your command, as well as other useful variables already defined and ready to use. Be sure to check out 
&lt;a href=&#34;https://github.com/google/python-fire#python-fire-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Fire’s documentation&lt;/a&gt; for more on this and the other useful features Fire provides.&lt;/p&gt;
&lt;p&gt;Between Python Fire’s simplicity, generality, and power, we hope you find it a useful library for your own projects.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>