<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>messager on David Bieber</title>
    <link>https://davidbieber.com/tags/messager/</link>
    <description>Recent content in messager on David Bieber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://davidbieber.com/tags/messager/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dealing with Giant Group Chats</title>
      <link>https://davidbieber.com/snippets/2022-07-05-giant-group-chats/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2022-07-05-giant-group-chats/</guid>
      
      <description>&lt;p&gt;Sometimes &amp;ndash; usually because of Alex K Chen &amp;ndash; I am added to a giant group chat (GGC).
Today it was a 200+ person highly active chat with folks talking about AI programming tools, aging, and movies.
I love being added to such a chat. It makes me feel thought-of, and my opinions respected. So, do keep adding me to GGCs.
However, with being added to a GGC comes some struggles. I haven&amp;rsquo;t fully figured out how to handle a GGC just yet.&lt;/p&gt;
&lt;p&gt;I think some people handle these situations in a more natural way than myself. Here&amp;rsquo;s what I imagine. They&amp;rsquo;re doing something else on the computer, messages are open in the background or in a side window. If they have a conversation-adjacent thought, they share it. If they see a message that looks interesting, they read it. Otherwise, they do their other activities and get on with their life.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If they have a conversation-adjacent thought, they share it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This part is Struggle #1.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If they see a message that looks interesting, they read it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This part is Struggle #2.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;struggle-1-sharing-thoughts-casually-in-a-200-person-setting&#34;&gt;Struggle #1: Sharing thoughts casually in a 200+ person setting&lt;/h3&gt;
&lt;p&gt;Why is this a struggle? I think slowly. I edit. I rethink relevance as the conversation moves away.
The hypothetical person who handles GCCs as described above just types and hits enter.
I think about the permanence of putting something on the internet.
I think about confidentiality of work-adjacent stuff.
I think about whether what I&amp;rsquo;m saying is true, and about how true it is.&lt;/p&gt;
&lt;h3 id=&#34;struggle-2-staying-abreast-of-200-messages-per-hour&#34;&gt;Struggle #2: Staying abreast of 200 messages per hour&lt;/h3&gt;
&lt;p&gt;I don&amp;rsquo;t want to read all these messages.
They glimmer and my attention is drawn to them, but that doesn&amp;rsquo;t reflect my conscious decision making.
I&amp;rsquo;d much rather read a summary of the messages or a digest of the topics discussed once a week or so.
Then, only if a topic of interest was discussed, I might want to dive deeper and read the individual messages, and
contemplate leaving a reply.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tooling-for-struggle-1&#34;&gt;Tooling for Struggle #1&lt;/h3&gt;
&lt;p&gt;tl;dr Draft messages outside of conversation UI. Use &amp;ldquo;approve for dealyed send&amp;rdquo; model for sending messages.&lt;/p&gt;
&lt;p&gt;Struggle #1 is a personal psychological struggle.
It isn&amp;rsquo;t first and foremost something for which tooling seems relevant.
If I&amp;rsquo;m not comfortable sharing something with 200 people in a chat, why would tooling change that?
Well, as I&amp;rsquo;ve learned from adding 
&lt;a href=&#34;https://davidbieber.com/post/2022-01-08-new-messager-setup/&#34;&gt;Messager in Go Note Go&lt;/a&gt; tooling can actually make a huge difference in this type of space.
If instead of feeling like I&amp;rsquo;m sending a message to a massive group, I instead feel like I&amp;rsquo;m writing a draft of my thoughts, something I&amp;rsquo;ll maybe send later but maybe not, suddenly it becomes so much easier to write.
And then, once it&amp;rsquo;s written, it also becomes much easier to send.
This is the same lesson I&amp;rsquo;ve learned over and over with snippets since I initially decided to set up this system as 
&lt;a href=&#34;https://davidbieber.com/snippets/2019-12-30-writing-for-no-audience/&#34;&gt;writing for no audience&lt;/a&gt; back in 2019.&lt;/p&gt;
&lt;p&gt;So, what would the tooling look like for dealing with Struggle #1 in GGCs?
I would click a message to start drafting a response,
it would copy the message and context into an editor &amp;ndash; Roam Research, say &amp;ndash; and maybe even stick in the template for writing a snippet.
Then, completely outside the context of the group thread I could compose my thoughts.
If I decide to share it back to the group, great.
If I decide to instead post that thought as a snippet, great.
And if it remains relegated to my notes forever and never sees the light of day, that&amp;rsquo;s a fine outcome too.&lt;/p&gt;
&lt;p&gt;[Aside: The acceptability of that outcome is what makes the writing easier. The very possibility of that outcome diminishes the possibility of that outcome by making the other outcomes more likely. It&amp;rsquo;s the opposite of a self-fulfilling prophecy. A self-fulfilling prophesy is an expectation whose existence leads to its own fulfillment; this is an expectation whose very existence works to prevent its fulfillment.]&lt;/p&gt;
&lt;p&gt;One of the lessons I learned from my Go Note Go messager-queue was the value of the &amp;ldquo;approve for delayed send&amp;rdquo; model.
Psychologically it was easier for me to mark a message as approved for sending, and have an automated system later send the message on my behalf once it was approved, rather than directly sending it myself.
Marking something as approved for sending (1) admits the possibility that I make further revisions to the message, and (2) internally relieves myself of some of the responsibility of sending the message. Of course, I am still fully responsible for the message and I accept this responsibility, but nevertheless that perception of decreased responsibility is a relaxing feeling that makes message sending easier.
It also (3) prevents me from actively waiting for replies to come it, a behavior I&amp;rsquo;d like to avoid. It does this because my messages go out without my awareness in the moment, so I cannot sit refreshing or watching for new messages. This way I don&amp;rsquo;t need to expend effort diverting my attention away from waiting for messages; my own unawareness has taken care of this for me.
So, having this &amp;ldquo;approve for delayed send&amp;rdquo; model for dealing with GGCs would be appreciated.&lt;/p&gt;
&lt;h3 id=&#34;tooling-for-struggle-2&#34;&gt;Tooling for Struggle #2&lt;/h3&gt;
&lt;p&gt;Struggle #2 has psychological components, but is also more directly about capabilities.&lt;/p&gt;
&lt;p&gt;The psychological bit:
Keeping up with 200 messages per hour isn&amp;rsquo;t even desirable. Why? It&amp;rsquo;s not that it&amp;rsquo;s a lot of noise &amp;ndash; though sometimes there is a lot of noise.
But even when there&amp;rsquo;s a lot of high quality interesting fun messages, it&amp;rsquo;s not stuff I&amp;rsquo;m actively looking to read or learn about or people that I&amp;rsquo;m choosing to keep in touch with. Instead, it&amp;rsquo;s whatever the group collectively has steered toward.
I&amp;rsquo;d rather be more intentional about what I read and discuss, rather than being at the whims of 200+ people, many of whom I haven&amp;rsquo;t met.
However, there is tension between that desire for intentionality and the desire to hear folks&#39; interesting ideas and share my own.
Adding to the tension further is a natural inclination toward reading messages as they come in, because they&amp;rsquo;re attention-grabbing even if they aren&amp;rsquo;t where I&amp;rsquo;d like to place my focus.&lt;/p&gt;
&lt;p&gt;The capabilities bit:
Even if I decided I did want to stay abreast of the conversation, there&amp;rsquo;s simply too much to reasonably process.
People are discussing topics about which I have a lot to learn.
I don&amp;rsquo;t have the bandwidth to think deeply &amp;ndash; or even shallowly &amp;ndash; about what folks are saying, while also maintaining normal human functions.&lt;/p&gt;
&lt;p&gt;So, what tooling can help?&lt;/p&gt;
&lt;p&gt;Summarization:
A machine learning system that categorizes messages by topic would be super helpful.
It could send a weekly digest listing the topics discussed, and clicking on a topic could bring me to a summary of the messages, with the option to drill down into the individual messages.&lt;/p&gt;
&lt;p&gt;Notification settings:
Right now I&amp;rsquo;ve simply turned off all notifications. If I could turn back on notifications for specific topics, that would be nice. E.g. &amp;ldquo;notify me if people start talking about programming tools again, but only if we haven&amp;rsquo;t talked about programming tools in at least a day since the last time you notified me.&amp;rdquo; This type of notification seems straightforward to build combining my Messager system with LLMs. Perhaps I&amp;rsquo;ll give it a go.&lt;/p&gt;
&lt;p&gt;Messenger UI: Even with notifications disabled, GGCs appear first in my list of Messenger chats because FB orders them by message recency, and GGCs always have a recent message. I&amp;rsquo;d prefer a way to keep them out of this default view, so I can see genuine conversations with individual people in their place.&lt;/p&gt;
&lt;p&gt;Browsing UI: The existing UI is unhelpful for trying to get an overview of the conversation. There&amp;rsquo;s a lot of whitespace, so only a few messages are visible at once. Replies for different topics are all mixed together.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you&amp;rsquo;re working on anything like the toolings mentioned here, don&amp;rsquo;t hesitate to get in touch. There&amp;rsquo;s a Discussions section below, or feel free to ping me in a GGC!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Two Snippets I want to write about GNG and Messager</title>
      <link>https://davidbieber.com/snippets/2022-01-08-gng-messager-snippet-plans/</link>
      <pubDate>Sat, 08 Jan 2022 02:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2022-01-08-gng-messager-snippet-plans/</guid>
      
      <description>&lt;p&gt;I have two new ideas for snippets I want to write. They&amp;rsquo;re about Go Note Go and Messager Queue, both side projects I&amp;rsquo;ve been putting a bunch of time into the last few days. The snippet ideas are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using Go Note Go as an outliner&lt;/li&gt;
&lt;li&gt;Adding Hacker News to Messager Queue, and then auto-queuing Twitter and HN posts for snippets.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first is about &lt;em&gt;using Go Note Go as an outliner&lt;/em&gt;. This is a new feature I&amp;rsquo;ve added to Go Note Go just in the last day or so. Before yesterday, each note entered via Go Note Go was it&amp;rsquo;s own bullet in your note-taking system. Now (at least for Roam), you can also use tab to indent and dedent notes.
This sounds simple, but thinking through the user experience, taking into consideration that there is no screen, was a fun experience.
It also sounds like an only marginal improvement, but for me it&amp;rsquo;s been rewarding more than I expected. It has interesting interactions with the 
&lt;a href=&#34;https://davidbieber.com/post/2022-01-08-new-messager-setup/&#34;&gt;new message sending feature&lt;/a&gt; &amp;ndash; making sending messages even more enjoyable.
And it lends itself well to progressive summarization and chronologically organized notes;
with the current implementation, each note-taking &amp;ldquo;session&amp;rdquo; has a timestamp and blank space for a summary at the top of the session. I can fill in the blank space and then collapse the notes, making it easier to skim through them later.
Perhaps these summaries will serve as training / fine-tuning data for an autosummarizer later.&lt;/p&gt;
&lt;p&gt;The second snippet idea is a new script I am thinking of writing that will add messages to my new Messager Queue automatically.
I&amp;rsquo;ve toyed with the idea of sharing more of my snippets publicly in the past.
Currently, I only share them very rarely.
Only partially is this an active decision; it is also partially inertia and there being an activation energy and unnaturalness for me in posting publicly.
While the active decision reasons will remain, having auto-generated messages populate my Messager Queue periodically will really dilute any inertia / activation energy / unnaturalness reasons for not sharing snippets, and those are precisely the reasons I want to eliminate.
Doing this will require a small change to the Messager Queue to support Hacker News; this should only take a few minutes, as HN is already supported by Messager.
Then, it will likely take a few hours to write a script that periodically adds messages about my snippets to my Messager Queue.
One source of these messages will be the &amp;ldquo;message&amp;rdquo; field at the top of some of my snippet frontmatters.
For others I can just make a templated message using the snippet title; the beauty of Messager Queue is I don&amp;rsquo;t need to autogenerate the perfect message, since I can tweak or rewrite it before approving the message to go out.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;ve now put down all the things I wanted to say about those two snippets. Does it still make sense to write them? I don&amp;rsquo;t know; I might turn them into new snippets anyway.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sending messages as I drift off to sleep</title>
      <link>https://davidbieber.com/post/2022-01-08-new-messager-setup/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/post/2022-01-08-new-messager-setup/</guid>
      
      <description>&lt;p&gt;In this post I describe my new Messager setup,
and how it allows me to send messages directly from Roam Research &lt;em&gt;or&lt;/em&gt;
from a standalone keyboard (no monitor) that I keep at my bedside as I drift off to sleep, and which I take driving and camping.&lt;/p&gt;
&lt;p&gt;Currently my setup supports sending messages to
Facebook Messenger, Twitter,
Slack, Discord, and iMessage.
I intend to add gChat and email support next, since there are still a handful of people I want to message that don&amp;rsquo;t use any of these.&lt;/p&gt;
&lt;p&gt;Above all else, the beauty of this project to me is its usability,
which is hard to communicate in a write-up like this.
Some of the usability comes from the way the components integrate with my existing workflows.
Some of the usability comes from design choices
(like using a keyboard with no monitor for note-taking and message drafting).
I&amp;rsquo;ll try to point out these usability elements along the way.
Bear in mind I designed this primarily for myself
(though I have a handful of friends along for the ride as well, trying it out and making their own contributions).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive in.&lt;/p&gt;
&lt;h3 id=&#34;go-note-go-the-headless-keyboard&#34;&gt;Go Note Go: The Headless Keyboard&lt;/h3&gt;
&lt;p&gt;For some background, I developed Go Note Go, a headless keyboard designed for note-taking on the go.
Go Note Go is a note-taking system for when you&amp;rsquo;re on the go, with a focus on driving and camping.
You can 
&lt;a href=&#34;https://davidbieber.com/projects/go-note-go&#34;&gt;read all about Go Note Go here&lt;/a&gt; and learn more on 
&lt;a href=&#34;https://github.com/dbieber/gonotego&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;its GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Go Note Go&amp;rsquo;s main purpose is note-taking.
Anything you type into Go Note Go or voice-record into it gets transcribed and uploaded to your notes as soon as it gets an internet connection.
For me, Go Note Go uploads to Roam Research. It also supports RemNote, IdeaFlow, Mem, and Notion, and adding additional systems isn&amp;rsquo;t too difficult.&lt;/p&gt;
&lt;p&gt;One of the usability perks of Go Note Go is that there is no monitor. This means you can&amp;rsquo;t get distracted browsing the internet while writing on Go Note Go. You also can&amp;rsquo;t get distracted wordsmithing your own writing. It makes writing pleasurable, even if it comes at the cost of having typos and stray thoughts in your writing; you can always clean those up later.&lt;/p&gt;
&lt;p&gt;Go Note Go does a lot more, so I do encourage you to 
&lt;a href=&#34;https://davidbieber.com/projects/go-note-go&#34;&gt;learn more about it&lt;/a&gt;, but it isn&amp;rsquo;t the focus of this post, which is about sending messages.
For the purposes of this post, Go Note Go is a data entry system for Roam. And since I&amp;rsquo;ve also built a system that allows sending messages directly from Roam, this means I can now send messages directly from Go Note Go. So, I can send messages when driving, camping, and as I drift off to sleep at night.&lt;/p&gt;
&lt;p&gt;To send a message in Go Note Go, you simply &amp;ldquo;@&amp;rdquo; the person you are writing to. To send a message to Adriana, I would write &amp;ldquo;@Adriana Message goes here&amp;rdquo;. To send a message to David Dohan (using first and last name), I could write &amp;ldquo;@David Dohan: Message goes here&amp;rdquo;. You can @ someone at any point in the message. You can also @ multiple people, and Messager will send them a group message.&lt;/p&gt;
&lt;p&gt;Go Note Go acts as an outliner now too; this is both a big usability improvement for Go Note Go on it&amp;rsquo;s own, and doubly so for using Go Note Go as a messager. An &amp;ldquo;outliner&amp;rdquo; is a system for taking notes as a series of nested bullets. You can push tab to indent notes underneath other notes; I&amp;rsquo;ve developed a user experience that makes this moderately natural, even in the absence of a monitor or any other visual feedback. For sending messages, the outliner feature is a boon. Any notes you nest under an @&amp;rsquo;d note will also register as additional messages for the @&amp;rsquo;d recipients. This makes writing longer multiline messages a pleasure, even without a monitor.&lt;/p&gt;
&lt;p&gt;The default behavior of my messaging system is to hold the messages for approval before sending them. So, the messages that I write as I drift off to sleep don&amp;rsquo;t send as I drift off to sleep. Instead, I see them in the morning and approve them, and only upon being approved are they sent automatically.&lt;/p&gt;
&lt;p&gt;This delayed-approve-then-send approach is particularly well suited for Go Note Go, where I likely make typos and want to clean up the messages before they are sent, since I am writing them without a monitor. Later in the post I&amp;rsquo;ll dive into what the approval process looks like (tl;dr there&amp;rsquo;s a spreadsheet where I can mark a message as &amp;ldquo;OK&amp;rdquo; to send), but first I want to share additional benefits of being able to send messages directly from my note-taking app, which is currently Roam Research.&lt;/p&gt;
&lt;h3 id=&#34;drafting-messages-in-roam-research&#34;&gt;Drafting Messages in Roam Research&lt;/h3&gt;
&lt;p&gt;Anything I write on my Go Note Go appears in Roam Research, but I can also take notes directly in Roam.
Just like on Go Note Go, the way to draft a message in Roam is to &amp;ldquo;@&amp;rdquo; the person you are writing to.
Messager has some heuristics it uses to translate your @&amp;rsquo;s into proper recipients.
So, the syntax for @&amp;lsquo;ing someone isn&amp;rsquo;t too strict.&lt;/p&gt;
&lt;p&gt;Using Roam offers some possibilities beyond what I can do on Go Note Go, such as including images in messages.
Like on Go Note Go, you can use nested bullets to create longer messages,
and you can @ as many people as you want for a message.
In Roam, however, you can also include images in your messages.
Messager will intelligently send those in the native format used by the underlying messaging service,
rather than blindly sending the markdown stored in Roam.
I find this feature, being able to use images naturally in Roam, and then have them send naturally as messages,
quite pleasant.&lt;/p&gt;
&lt;p&gt;One future direction I&amp;rsquo;d like for this project is to add a &amp;ldquo;send&amp;rdquo; button in Roam next to any messages I&amp;rsquo;ve drafted there,
as well as to display the status of the messages inline in my notes. That&amp;rsquo;s not implemented now, but would be a nice-to-have for the future.&lt;/p&gt;
&lt;p&gt;Today, all messages are automatically added to my &amp;ldquo;messager queue&amp;rdquo; where they wait for approval before being sent.
I like having this approve-before-sending approach as the default, since it psychologically frees me up to write things I might not otherwise write if I was instead using a send button that sent immediately.
However, sometimes being able to send something immediately is desirable, and that&amp;rsquo;s not a clean option in the current setup.&lt;/p&gt;
&lt;h3 id=&#34;roam-to-sheets-the-messager-queue&#34;&gt;Roam to Sheets: The Messager Queue&lt;/h3&gt;
&lt;p&gt;Any messages in Roam (whether entered directly into Roam, or entered via Go Note Go), are automatically added to a spreadsheet, the &amp;ldquo;Messager Queue&amp;rdquo;. These are the spreadsheet&amp;rsquo;s columns:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Service&lt;/td&gt;
&lt;td&gt;Recipient&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Approval&lt;/td&gt;
&lt;td&gt;Status&lt;/td&gt;
&lt;td&gt;Metadata&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Messager Queue sheet is filtered by default to show all pending messages. For each message it shows the &lt;em&gt;Service&lt;/em&gt; on which it will be sent and well as the &lt;em&gt;Recipient&lt;/em&gt; of the message. The service can be one of FB Messenger, Twitter, iMessage, a Slack server, or Discord. The recipient can either be an individual, a list of individuals, a group, a Slack channel, or a Discord server and channel.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also a sheet that lists aliases, so it&amp;rsquo;s easy to use a short name or informal name to refer to a longer service or recipient; e.g. I use &amp;ldquo;@Audio Tools&amp;rdquo; as a shorthand for sending to a group of 5 people on Messenger all interested in audio tools for networked thought.&lt;/p&gt;
&lt;p&gt;The Messager Queue sheet also displays the &lt;em&gt;Text&lt;/em&gt; of the message to send, so you can easily clean up the message here for any typos or clarifications before it is sent.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Date&lt;/em&gt; and &lt;em&gt;Time&lt;/em&gt; columns allow for scheduling messages to be sent at any point in the future. Leave them blank and the message will be sent as soon as it is approved. Use keyboard shortcuts cmd-; (for date) and cmd-shift-; (for time) to quickly fill out these columns if desired.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;em&gt;Approval&lt;/em&gt; column is the most important. Mark a messages as OK if you want it to be sent, or as Ignored if you deside to skip it. The &lt;em&gt;Status&lt;/em&gt; column is updated automatically by Messager when the message is sent (or if it fails to send, then the error appears here). You can also mark the Status manually with whatever value you want (e.g. if you send the message manually), and the Messager system will ignore that message going forward. If you want the system to retry sending a message, simply clear out the Status column and it will try again.&lt;/p&gt;
&lt;p&gt;I include this spreadsheet as a custom service in 
&lt;a href=&#34;https://getferdi.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ferdi&lt;/a&gt;, so it lives alongside all the messaging apps I use. (This in itself might be the subject of a future 
&lt;a href=&#34;https://davidbieber.com/snippets&#34;&gt;snippet&lt;/a&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;why-the-approval-system-over-immediate-messages&#34;&gt;Why the approval system over immediate messages?&lt;/h3&gt;
&lt;p&gt;Beyond allowing me to catch a bunch of typos, it&amp;rsquo;s also a psychologically useful thing for me.
I am more willing to write and I feel able to say more things that I might not otherwise,
knowing I have the opportunity to cancel or change the message later.
In that way, it&amp;rsquo;s like gmail&amp;rsquo;s undo feature. In gmail, undo not a true undo, but having those 30 seconds after clicking send to retract the message make a big difference.&lt;/p&gt;
&lt;p&gt;Another benefit of sending the messages only after approving them is the ability to sleep at night. If I write a message at night, I know you haven&amp;rsquo;t responded yet because my messages haven&amp;rsquo;t even sent yet; they&amp;rsquo;ll go out in the morning, after I&amp;rsquo;ve had a chance to clean them up. So, I don&amp;rsquo;t spend any mental effort wondering if there&amp;rsquo;s a response from you. It also allows me to set the appropriate tone for the messages, by having them go out at a reasonable time, rather than appearing urgent by being sent in the middle of the night. And it does this without me needing to keep the message draft in my head as I sleep. So, I sleep better.&lt;/p&gt;
&lt;p&gt;This is why, while the ability to send messages immediately would also be a good feature to add, I am inclined to leave approve-in-the-morning messages as the system&amp;rsquo;s default behavior.&lt;/p&gt;
&lt;h3 id=&#34;notifications-from-bieber-bot&#34;&gt;Notifications from Bieber Bot&lt;/h3&gt;
&lt;p&gt;One additional small usability feature is that Bieber Bot will message me in the morning or evening whenever there are messages in the Messager Queue awaiting my approval.&lt;/p&gt;
&lt;p&gt;This sounds like a small convenience, and in fact has proven even more useful than it might at first sound.
When I wake up in the morning, I sometimes don&amp;rsquo;t remember that I&amp;rsquo;ve written messages the preceding night.
So, having Bieber Bot send me the link to the Messager Queue and gently remind me to approve the messages has been
consistently charming and welcome. Thanks, Bieber Bot.&lt;/p&gt;
&lt;h3 id=&#34;automatic-sending-from-sheets-with-messager&#34;&gt;Automatic Sending from Sheets with Messager&lt;/h3&gt;
&lt;p&gt;Messager is the underlying system that sends the messages in the Messager Queue system.
As noted previously, it supports
Facebook Messenger, Twitter,
Slack, Discord, and iMessage.
It also supports Hacker News, which hasn&amp;rsquo;t been so useful for this project.
And I am thinking I may add gChat and email support next.&lt;/p&gt;
&lt;p&gt;I use Messager for more than just sending messages from the Messager Queue spreadsheet;
it also backs other projects like my 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-01-30-sql-for-the-kangaroo-auto-responder/&#34;&gt;Kangaroo Auto-responder&lt;/a&gt; and 
&lt;a href=&#34;https://davidbieber.com/projects/bieber-bot/&#34;&gt;several parts of Bieber Bot&lt;/a&gt;.
Its purpose, in the most broad sense, is to support programmatically sending and receiving messages in a uniform manner across all the messaging systems I use.&lt;/p&gt;
&lt;p&gt;For Facebook Messager, it uses 
&lt;a href=&#34;https://fbchat.readthedocs.io/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fbchat&lt;/a&gt; to enable programmatically sending and receiving messages as myself. It also uses Facebook&amp;rsquo;s API to allow sending messages as Bieber Bot.&lt;/p&gt;
&lt;p&gt;For Twitter, it uses the API to support public tweets, private tweets (using a separate account; 
&lt;a href=&#34;https://davidbieber.com/post/2021-03-07-roam-twitter-bot-dev-guide/&#34;&gt;see here for how I use this to reclaim my attention&lt;/a&gt;), and DMs.&lt;/p&gt;
&lt;p&gt;For iMessage, it uses AppleScript.&lt;/p&gt;
&lt;p&gt;Slack and Discord are the most recent additions, and they currently live outside the core Messager system;
they are implemented using Browserflow flows.
This means that I am effectively sending Slack and Discord messages as myself, rather than using an API to do so.
The messages are sent in a browser using clicks and keyboard presses,
all in the same human-centric UI that I would use if I were to send the messages manually.
I&amp;rsquo;m so grateful to Browserflow for making this possible, as Slack and Discord have been really key additions to this project.&lt;/p&gt;
&lt;h3 id=&#34;reflections-on-the-setup&#34;&gt;Reflections on the setup&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve been using the setup for only a few days so far, and am continuing to actively develop it.
So far, I absolutely love it.&lt;/p&gt;
&lt;p&gt;The headless typing experience provided by Go Note Go makes for a great environment for drafting messages.
So too does using Roam Research while scrolling through social media. (I&amp;rsquo;m the sort of person who doesn&amp;rsquo;t usually like replying publicly to social media posts, but does enjoy engaging with them in 1:1 or small group chat messages.)
Drifting off to sleep has proven to be another excellent time to share thoughts with friends.
I don&amp;rsquo;t want to start &lt;em&gt;a conversation&lt;/em&gt; with friends as I drift off to sleep, but loads of thoughts come to mind that I do want to share with people, and so adding them to my Messager Queue to send the next day has been quite satisfying.&lt;/p&gt;
&lt;p&gt;If this interests you, feel free to get in touch.
If you do, I&amp;rsquo;ll do my best to get back to you, likely as I&amp;rsquo;m drifting off to sleep.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Note Go Messager without Pixel-Space Automation</title>
      <link>https://davidbieber.com/snippets/2022-01-02-pixel-space-automation/</link>
      <pubDate>Sun, 02 Jan 2022 01:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2022-01-02-pixel-space-automation/</guid>
      
      <description>&lt;p&gt;&lt;em&gt;This snippet was originally going to be about pixel-space automation. Then I found I didn&amp;rsquo;t need it for what I wanted to do: sending messages to Twitter, Facebook, Slack, and Discord from Go Note Go, Roam Research, and Bieber Bot.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Happy New Year! I&amp;rsquo;d really like to automate Mac apps that don&amp;rsquo;t expose actions to Automator
using pixel-space navigation and clicks and typing to control the automation. This is why and how.&lt;/p&gt;
&lt;p&gt;(Update from the end of the snippet: By the time I finished writing the snippet, I had automated everything I intended to using browser automation in Browserflow, never once needing to automate Ferdi. I still think pixel-space automation would be wonderful, but my initial motivation for it turns out to be insufficient.)&lt;/p&gt;
&lt;h3 id=&#34;motivation-improving-messager-by-automating-ferdi&#34;&gt;Motivation: Improving Messager by Automating Ferdi&lt;/h3&gt;
&lt;p&gt;I have a side project &amp;ldquo;Messager&amp;rdquo; that allows for programmatically sending and receiving messages
across a wide variety of messaging services.
I also use Ferdi for manually managing an even wider variety of messaging services.&lt;/p&gt;
&lt;p&gt;Currently Messager supports
Facebook Messenger (as myself and as Bieber Bot),
Twitter (public tweets, private tweets, and DMs),
HackerNews,
and it has limited support for Slack and Discord.
Ferdi, on the other hand, supports a much wider range of services, but doesn&amp;rsquo;t offer programmatic access;
I use Ferdi with
Facebook Messenger (as myself and as Bieber Bot),
Twitter (public tweets, private tweets, and DMs),
multiple Slacks,
Discord,
Gitter,
WhatsApp,
Telegram,
as well as for non-messaging services like Roam Research,
multiple spreadsheets,
supervisord,
and other adhoc use cases.&lt;/p&gt;
&lt;p&gt;I would like to extend Messager to have wider support,
particularly to improve support for Slack and Discord.
To do this, &lt;mark&gt;I&amp;rsquo;d love to automate Ferdi&lt;/mark&gt;.&lt;/p&gt;
&lt;h3 id=&#34;motivation-go-note-go---messager-bridge&#34;&gt;Motivation: Go Note Go - Messager Bridge&lt;/h3&gt;
&lt;p&gt;Why do I want to improve Messager &lt;em&gt;now&lt;/em&gt;? It&amp;rsquo;s because of 
&lt;a href=&#34;https://davidbieber.com/projects/go-note-go&#34;&gt;Go Note Go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m adding messaging support to Go Note Go. The main use case I&amp;rsquo;m targeting is this:&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m drifting off to sleep and realize I want to tell someone something.
So I write in Go Note Go something along the lines of &amp;ldquo;Tell John Smith Hey John, I have this new idea for Go Note Go where you can send messages as your drifting off to sleep &amp;ndash; maybe I can tell you about it tomorrow&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;When I wake up the following morning, Bieber Bot has messaged me with a link to a spreadsheet.
It has all the messages I drafted the previous night (they haven&amp;rsquo;t been sent yet).
There, I can clean them up for any typos and &amp;ldquo;approve&amp;rdquo; them (mark them as OK to send).
And once they&amp;rsquo;re approved, they&amp;rsquo;ll be sent automatically using Messager.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s in support of this project that I&amp;rsquo;d love for Messager to support a wider variety of services.
Ideally the system will intelligently select the service to use to send the message based on the recipients.
It will include the service in the spreadsheet, so that I can adjust the service if needed before approving the message.&lt;/p&gt;
&lt;p&gt;So this is going to be a Go_Note_Go-Sheets-Messager-Bieber_Bot collab.&lt;/p&gt;
&lt;p&gt;tl;dr Go Note Go adds draft messages to a spreadsheet. Bieber Bot uses that spreadsheet to message me about new draft messages, and to message friends on my behalf with approved messages.&lt;/p&gt;
&lt;h3 id=&#34;motivation-going-beyond&#34;&gt;Motivation: Going beyond&lt;/h3&gt;
&lt;p&gt;For the Messager application described so far, pixel-space automation is not necessary.
All of the services I want to automate can be opened in the Browser,
and so existing Browser automation techniques are sufficient.
I would use Browserflow for this if it supported programmatic triggers, but it does not.
(Psst&amp;hellip; DK, can you add the ability to programmatically trigger a local flow please?)&lt;/p&gt;
&lt;p&gt;Given this, why is pixel-space automation interesting?
It&amp;rsquo;s because it would enable
(1) easier automation construction for the automations I&amp;rsquo;m interested in
and (2) it enables a much larger class of automations, and empowerment is key.

&lt;a href=&#34;https://davidbieber.com/snippets/2021-12-07-future-automation-software/&#34;&gt;See here for my dreams for the future of automation.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ferdi-actions&#34;&gt;Ferdi Actions&lt;/h3&gt;
&lt;p&gt;The main actions I want for the Messager application are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ferdi: Navigating to different services&lt;/li&gt;
&lt;li&gt;Discord: Choosing a server, channel, or recipient&lt;/li&gt;
&lt;li&gt;Discord: Sending and receiving messages on that channel&lt;/li&gt;
&lt;li&gt;Slack: Choosing a channel or recipient&lt;/li&gt;
&lt;li&gt;Slack: Sending and receiving messages on that channel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h3&gt;
&lt;h5 id=&#34;why-are-the-discord-and-slack-apis-not-sufficient&#34;&gt;Why are the Discord and Slack APIs not sufficient?&lt;/h5&gt;
&lt;p&gt;Both Discord and Slack have policies against using self-bots. Their APIs don&amp;rsquo;t allow you to programmatically control your own user account. So, controlling your account as a human would, through the provided chat client, is a natural way to approach the problem.&lt;/p&gt;
&lt;p&gt;The advantages of using Ferdi over the browser are: (1) it uses service hibernation, so you can skip loading the pages and logging in each time you start using a website, (2) maybe you can keep using the browser while Ferdi automates in the background.&lt;/p&gt;
&lt;p&gt;Each of these actions is doable using existing browser automation tools. Navigating to different services in the browser requires authentication though, if you&amp;rsquo;re not already logged in (which I would be in Ferdi). Perhaps with Browserflow&amp;rsquo;s cookie sharing feature, I can also already be logged in at the start of a Browserflow flow even on Cloud.&lt;/p&gt;
&lt;h3 id=&#34;current-status&#34;&gt;Current Status&lt;/h3&gt;
&lt;p&gt;I took a break in the middle of writing this flow and now I&amp;rsquo;ve implemented sending messages via Browserflow in both Slack and Discord.
I&amp;rsquo;ve also gone further toward the Go Note Go-Messager bridge,
implementing a few of the other steps.
Whenever I use &amp;ldquo;@Person&amp;rdquo; in Roam, Bieber Bot automatically copies the message into a spreadsheet.
The spreadsheet has an &amp;ldquo;Approval&amp;rdquo; column, where I can mark messages as OK to send.
Bieber Bot will then use Messager to send any approved messages.
Since Go Note Go sends it&amp;rsquo;s notes to Roam, this completes the circuit.&lt;/p&gt;
&lt;p&gt;I can now send messages from Go Note Go to any of Facebook Messenger, Twitter, Slack, and Discord.
I&amp;rsquo;m still excited about pixel-space automation, but I&amp;rsquo;ll have to save that excitement for a future snippet; for now, Browserflow was sufficient.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Brainstorming How to Replicate AIM Statuses Today</title>
      <link>https://davidbieber.com/snippets/2021-12-21-aim-statuses/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-12-21-aim-statuses/</guid>
      
      <description>&lt;p&gt;How do we bring back reliable aim statuses?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d like for folks to know if someone is genuinely available for a conversation.&lt;/p&gt;
&lt;p&gt;Some options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Could just ask.&lt;/li&gt;
&lt;li&gt;Could post statuses on social media.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neither of these really appeal to me. They feel kind of heavyweight. I guess, of the two, the former is more appealing. The latter would require rewriting social conventions a bit too much.&lt;/p&gt;
&lt;p&gt;Maybe if the &amp;ldquo;asking&amp;rdquo; felt automated, like if there was a pre-written canned message (that explained that it was a canned message), it could feel more lightweight. For example:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Hi, David Bieber would like to know if you&amp;rsquo;re available for a conversation now-ish. It&amp;rsquo;s not urgent. No need to respond if you&amp;rsquo;re not available. If you are available, Hi! Otherwise, you can just ignore this. -Bieber Bot&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Signing it Bieber Bot is supposed to indicate it&amp;rsquo;s a pre-written message, but I&amp;rsquo;m not sure if that comes across. Maybe adding &amp;ldquo;(This is a pre-written message.)&amp;rdquo; would be safer.&lt;/p&gt;
&lt;p&gt;Later, when people see that message for the second/third/nth time, they won&amp;rsquo;t have to read the whole thing, just seeing the general shape of it will be enough.&lt;/p&gt;
&lt;p&gt;But it will still contain it&amp;rsquo;s full meaning.&lt;/p&gt;
&lt;p&gt;I guess that&amp;rsquo;s similar in spirit to the 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-01-29-kangaroo-auto-responder/&#34;&gt;kangaroo 🦘&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sending the message for the first time though, still would feel heavy. Only the nth time would feel light.
This seems surmountable though. Maybe I&amp;rsquo;ll give it a try.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organizing a Twitter Discussion: Gathering Twitter Replies</title>
      <link>https://davidbieber.com/snippets/2021-11-20-twitter-replies/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2021-11-20-twitter-replies/</guid>
      
      <description>&lt;p&gt;I 
&lt;a href=&#34;https://twitter.com/Bieber/status/1461128201485402112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tweeted&lt;/a&gt; about spaced repetition earlier this week, sharing and summarizing 
&lt;a href=&#34;https://davidbieber.com/snippets/2021-11-02-improvements-to-spaced-repetition/&#34;&gt;my latest snippet on the subject&lt;/a&gt;. A bunch of people left thoughtful replies, and I was quite pleased with the discussion. Now I want to look over the discussion holistically, but I don&amp;rsquo;t see a great way to do this. I don&amp;rsquo;t even see a way to look at all the replies to my thread in one place. I want to see not just this, but also replies to replies. TweetDeck might be able to help, but I don&amp;rsquo;t see how.&lt;/p&gt;
&lt;p&gt;I think what I&amp;rsquo;d like to do is write a little script that takes a tweet as input, and outputs links to all the replies and replies to replies in a little tree that I can put into Roam.
Then I can make notes on the full thread, and even link together different parts of the conversation.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s give this a try.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import twython
from messager import settings

client = twython.Twython(
        settings.TWITTER_CONSUMER_KEY,
        settings.TWITTER_CONSUMER_SECRET,
        settings.TWITTER_ACCESS_TOKEN,
        settings.TWITTER_ACCESS_TOKEN_SECRET)

def get_replies(status_id):
  status = client.lookup_status(id=status_id)[0]
  return get_replies_to_status(status)

def get_replies_to_status(status):
  status_id = status[&#39;id&#39;]
  screen_name = status[&#39;user&#39;][&#39;screen_name&#39;]
  results = client.search(
      q=f&#39;to:{screen_name}&#39;, sinceId=status_id, count=128)
  candidates = results[&#39;statuses&#39;]
  replies = []
  for candidate in candidates:
    if candidate[&#39;in_reply_to_status_id&#39;] == status_id:
      replies.append(candidate)
  return replies

def get_recursive_replies(status_id):
  status = client.lookup_status(id=status_id)[0]
  all_replies = []
  to_search = [status]
  searched = set()
  while to_search:
    status = to_search.pop()
    if status[&#39;id&#39;] not in searched:
      replies = get_replies_to_status(status)
      all_replies.extend(replies)
      to_search.extend(replies)
      searched.add(status[&#39;id&#39;])
  return all_replies

status_id = 1461128201485402112
replies = get_recursive_replies(status_id)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aside: I would love for this file (the markdown file I&amp;rsquo;m writing this snippet in) to double as a Python file.
When I run it, just the Python code block(s) would get run.&lt;/p&gt;
&lt;p&gt;To my surprise the Twitter API did not make it easy to query for replies to a tweet. So, I&amp;rsquo;m using the workaround on display above.
To get all replies to a tweet, I query for all tweets to the tweet author, and then filter for those that are actually replies.
Since the number of search results is limited, this might not always work; it depends on what order Twitter decides to sort tweets by. If Twitter returns the oldest tweets first, this method will work consistently.&lt;/p&gt;
&lt;p&gt;It does seem to be working for now, fortunately. There are 60 recursive replies to my tweet, and with this method I was able to lay them all out in a row. Pasting the urls into Roam, I find the default rendering of each tweet in Roam takes up a bit too much space though and provides too much context. So, I may need to modify the display a bit more.&lt;/p&gt;
&lt;p&gt;My hope is that I can lay out the entire conversation compactly, and then start marking it up with my own notes, e.g. tagging replies that express similar ideas so I can reply to them together rather than individually.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Accessing Your iMessages with SQL</title>
      <link>https://davidbieber.com/snippets/2020-05-20-imessage-sql-db/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2020-05-20-imessage-sql-db/</guid>
      
      <description>&lt;p&gt;If you use a Mac and use iMessage, you can access your iMessages programmatically. They are stored by iMessage as a sqlite database, which you can easily access.&lt;/p&gt;
&lt;h2 id=&#34;accessing-the-database&#34;&gt;Accessing the Database&lt;/h2&gt;
&lt;p&gt;The database is typically stored at &lt;code&gt;~/Library/Messages/chat.db&lt;/code&gt;, though that location is configurable.&lt;/p&gt;
&lt;p&gt;If you try to access the database, however, you will likely encounter this unhelpful error message: &lt;code&gt;~/Library/Messages/chat.db: Operation not permitted&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Thankfully, OSXDaily has put together a 
&lt;a href=&#34;https://osxdaily.com/2018/10/09/fix-operation-not-permitted-terminal-error-macos/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;helpful step by step guide to resolving this error&lt;/a&gt;, which I&amp;rsquo;ll summarize here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Navigate to your &lt;code&gt;System Preferences &amp;gt; Security &amp;amp; Privacy &amp;gt; Privacy &amp;gt; Full Disk Access&lt;/code&gt; settings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the Lock and &lt;code&gt;+&lt;/code&gt; symbol to give full disk access to the Terminal App (located in &lt;code&gt;Applications &amp;gt; Utilities &amp;gt; Terminal&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may need to relaunch Terminal for the change to take effect; I did not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you&amp;rsquo;ve done this, you can start poking around at your iMessages programmatically.&lt;/p&gt;
&lt;h2 id=&#34;taking-a-look-around&#34;&gt;Taking a Look Around&lt;/h2&gt;
&lt;p&gt;I begin with making a backup:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp ~/Library/Messages/chat.db ~/chat.db&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now I open the database with sqlite3.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlite3 ~/chat.db&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I run &lt;code&gt;.tables&lt;/code&gt; to see what tables there are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;_SqliteDatabaseProperties&lt;/td&gt;
&lt;td&gt;kvtable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;attachment&lt;/td&gt;
&lt;td&gt;message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chat&lt;/td&gt;
&lt;td&gt;message_attachment_join&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chat_handle_join&lt;/td&gt;
&lt;td&gt;message_processing_task&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chat_message_join&lt;/td&gt;
&lt;td&gt;sync_deleted_attachments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deleted_messages&lt;/td&gt;
&lt;td&gt;sync_deleted_chats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;handle&lt;/td&gt;
&lt;td&gt;sync_deleted_messages&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are some interesting tables in there: &lt;code&gt;message&lt;/code&gt; seems most important. It looks like we&amp;rsquo;ll also be able to look up attachments using tables &lt;code&gt;attachment&lt;/code&gt; and &lt;code&gt;message_attachment_join&lt;/code&gt;. Strangely, there&amp;rsquo;s a table present for deleted messages, which suggests a sort of &amp;ldquo;trash can&amp;rdquo; where messages are not permanently deleted immediately upon deletion.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.schema message&lt;/code&gt; is the command for viewing the schema of the message table.
We can also jump right in with &lt;code&gt;SELECT * FROM message;&lt;/code&gt; to see what sort of data is contained within. Sure enough, human readable messages are present.&lt;/p&gt;
&lt;p&gt;This will all be interesting to investigate further at a later date.
One perk of understanding this mechanism for me is that I&amp;rsquo;ll be able to write events that are triggered in response to iMessages. This enables me to write custom notification criteria. For example, I can have messages that start &amp;ldquo;URGENT&amp;rdquo; notify me immediately, but I can have all other messages programatically withheld from notifying me until 9pm.&lt;/p&gt;
&lt;p&gt;This lets me receive the messages at the time and location that I want, rather than at the time Apple chooses for me. Thanks Bieber Bot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Posting to Hacker News Programmatically</title>
      <link>https://davidbieber.com/snippets/2020-05-02-hackernews-submit/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2020-05-02-hackernews-submit/</guid>
      
      <description>&lt;p&gt;If you run this snippet of Python code, it will submit this 
&lt;a href=&#34;https://davidbieber.com/snippets/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;ldquo;Snippet&amp;rdquo;&lt;/a&gt; (the one you&amp;rsquo;re currently reading) to Hacker News.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from html.parser import HTMLParser
import getpass
import requests
import time

USERNAME = (
    &#39;&#39;  # Put your Hacker News username here.
    or getpass.getuser()  # (But if you don&#39;t, we&#39;ll try a sensible default.)
)
PASSWORD = (
    &#39;&#39;  # We&#39;ll prompt you for your password, or you can enter it here.
    or getpass.getpass()
)
# You can reconfigure the title and url to submit here.
TITLE_TO_SUBMIT = &#39;Posting to Hacker News Programmatically&#39;
URL_TO_SUBMIT = &#39;https://davidbieber.com/snippets/2020-05-02-hackernews-submit/&#39;

# Login
session = requests.Session()
session.post(
    &#39;https://news.ycombinator.com/login&#39;,
    data={
        &#39;acct&#39;: USERNAME,
        &#39;pw&#39;: PASSWORD,
    },
)

# Get the CSRF token (&amp;quot;FNID&amp;quot;)
time.sleep(1)
class FNIDExtractor(HTMLParser):
  fnid = None
  def handle_starttag(self, tag, attrs):
    if tag.lower() == &#39;input&#39; and (&#39;name&#39;, &#39;fnid&#39;) in attrs:
      self.fnid = dict(attrs)[&#39;value&#39;]
f = FNIDExtractor()
submit_response = session.get(&#39;https://news.ycombinator.com/submit&#39;)
f.feed(submit_response.text)

# Submit
time.sleep(2)
session.post(
    &#39;https://news.ycombinator.com/r&#39;,
    data={
        &#39;title&#39;: TITLE_TO_SUBMIT,
        &#39;url&#39;: URL_TO_SUBMIT,
        &#39;fnid&#39;: f.fnid,
    },
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change the title and URL before running this to make a new submission, or run it as is to submit this snippet.&lt;/p&gt;
&lt;p&gt;If you try to submit a URL that&amp;rsquo;s already been submitted recently &amp;ndash; such as this snippet &amp;ndash; it won&amp;rsquo;t submit a second time, so no harm done in running this.&lt;/p&gt;
&lt;p&gt;To learn more about sessions and see why this works, you can read about them in the 
&lt;a href=&#34;https://requests.readthedocs.io/en/master/user/advanced/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;requests&lt;/em&gt; documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facebook Messenger SQL Queries</title>
      <link>https://davidbieber.com/snippets/2020-04-12-fb-messenger-sql/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://davidbieber.com/snippets/2020-04-12-fb-messenger-sql/</guid>
      
      <description>&lt;p&gt;Last week I dumped all my Facebook messenger messages into a Postgres database. I have it set up so that new messages are added the the database in real time as they are sent. Like I did in a 
&lt;a href=&#34;https://davidbieber.com/snippets/2020-04-11-browser-history-queries&#34;&gt;previous snippet&lt;/a&gt; for analyzing my browsing history, I&amp;rsquo;ll use this snippet to sketch out some useful queries for analyzing my message history.&lt;/p&gt;
&lt;h2 id=&#34;table-schemas&#34;&gt;Table Schemas&lt;/h2&gt;
&lt;p&gt;I have two tables of messages. &lt;code&gt;messenger_archive&lt;/code&gt; contains all messages from when I first joined Facebook in August 2008 through February 2020. &lt;code&gt;messenger&lt;/code&gt; contains messages from February 2020 through now, and is updated in real time.&lt;/p&gt;
&lt;p&gt;Using the commands &lt;code&gt;\d messenger&lt;/code&gt; and &lt;code&gt;\d messenger_archive&lt;/code&gt;, I inspect the table schemas.&lt;/p&gt;
&lt;h3 id=&#34;schema-messenger&#34;&gt;Schema: messenger&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;The message content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uid&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;A unique message id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;author&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;fbid&lt;/em&gt; of the message author&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;The timestamp in milliseconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forwarded&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;Whether the message is a forwarded message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread_id&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;A unique thread id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread_type&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;GROUP or USER, indicating the thread type&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;schema-messenger_archive&#34;&gt;Schema: messenger_archive&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sender_name&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;The message author&amp;rsquo;s name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;timestamp_ms&lt;/td&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;The timestamp in milliseconds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;content&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;The message content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;One of: Payment, Call, Share, Generic, Unsubscribe, or Subscribe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;The thread title, often the name of the other participant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is_still_participant&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;Whether I was still in the conversation at the time of the archive (Feb 2020)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread_type&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;One of: RegularGroup, Regular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thread_path&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;A unique identifier for the thread&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;schema-caveats&#34;&gt;Schema Caveats&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;messenger_archive.thread_path&lt;/code&gt; is not the same as the &lt;code&gt;messenger.thread_id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;messenger.author&lt;/code&gt; is an integer id, whereas the &lt;code&gt;messenger_archive.sender_name&lt;/code&gt; is a string name.&lt;/li&gt;
&lt;li&gt;There may be a few overlapping messages between the two tables (?), and there may be a few messages not captured in either table.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;message-queries&#34;&gt;Message Queries&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start sketching some useful queries.&lt;/p&gt;
&lt;h3 id=&#34;finding-links&#34;&gt;Finding Links&lt;/h3&gt;
&lt;p&gt;Listing domains from the archive:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select distinct
substring(content from &#39;.*://([^/]*)&#39;) as domain
from messenger_archive
limit 1000;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Counting unique domains:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select count(*) from (select distinct
substring(content from &#39;.*://([^/]*)&#39;) as domain
from messenger_archive) domains;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Listing links from the archive:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select distinct
substring(content from &#39;([a-z]*://[^/\s]*[a-zA-Z/]*)&#39;) as domain
from messenger_archive
limit 1000;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Counting unique links:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select count(*) from (select distinct
substring(content from &#39;([a-z]*://[^/\s]*[a-zA-Z/]*)&#39;) as domain
from messenger_archive) foo;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;email-addresses&#34;&gt;Email Addresses&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select distinct
substring(content from &#39;([a-zA-Z0-9.]+@[a-zA-Z0-9]+\.[a-zA-Z0-9]+)&#39;) as email
from messenger_archive
limit 100;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;looking-forward&#34;&gt;Looking Forward&lt;/h3&gt;
&lt;p&gt;I have a number of additional queries I&amp;rsquo;d like to write.
However, they will have to wait until a future snippet.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>